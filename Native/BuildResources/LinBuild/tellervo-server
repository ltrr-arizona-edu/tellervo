#!/usr/bin/php
<?php

/**
 * Check this script is being run from the command line
 */
if (!isset($argc))
{
	writeStdErr("This file should be called from the command line only.");
	exit(1);
}


// Set custom error handler to divert messages to log file
set_error_handler("myErrorHandler");

// Set up logging
$logfile = "/var/log/tellervo-installation.log";
if(hasRootPrivileges())
{
	// Make sure log file exists and make sure it is read and writeable
	exec("touch $logfile > /dev/null");
	exec("chmod a+rw $logfile > /dev/null");

	// Log
	exec("echo \"\n******* Running tellervo-server ********\n\" >> $logfile");
}


/**
 * Grab command line arguments either using long or short options
 */
$shortopts = "htrcnesvu";
$longopts = array("help", "test", "reconfigure", "configure", "network", "emptylog", "sysconfig", "version", "upgrade", "set-db-pwd", "start", "stop", "restart", "upgrade-db","firstrun", "deploy", "add-wms-name:", "add-wms-url:", "del-wms-name:", "info", "set-admin-pwd", "backup-db:", "restore-db:", "dbname:", "webfolder:", "cascade-delete:", "auto-configure");
$args = getopt($shortopts,$longopts);


// Grab database and web folder names if specified for a multiple database setup
if(isset($args["dbname"]) && isset($args["dbname"]))
{
	$dbname = $args["dbname"];
}
else
{
	$dbname = "tellervo";
}
if(isset($args["webfolder"]) && isset($args["webfolder"]))
{
	$wsbase = $args["webfolder"];
	if(substr($wsbase, -1)!="/") $wsbase = $wsbase."/";
}
else
{
	$wsbase = "/var/www/tellervo/";
}

// Output database and folder to logs
exec("echo \"  - Database name = $dbname\n\" >> $logfile");
exec("echo \"  - Apache folder = $wsbase\n\" >> $logfile");


/*******************************************************************;
 *  SET GLOBAL VARS
 ******************************************************************/;
$user 			  = "tellervo";
$pwd 			  = "";
$wsurl 			  = "";
$errorsFound 	  = FALSE;
$postgresversion  = "9.5";
$postgisversion   = "2.2";
$folderbase       = "/usr/share/tellervo-server/";
$pg_hba_file      = "/etc/postgres/?";  // set later
$pg_hba_file_orig = "/etc/postgres/?"; // set later
$permsfile        = $folderbase."set_database_permission.sql";
$permstemplate    = $folderbase."set_database_permission.template";
$configtemplate   = $folderbase."config.php.template";
$dbtemplate       = $folderbase."tellervo_database_template_1.3.sql";
$pljavaexttemplate= $folderbase."pljava_extension.sql";
$credentialsFile  = $folderbase."server_credentials";
$upgradeScripts   = $folderbase."db-upgrade-patches";
$configfile       = $wsbase."config.php";
$dbsetupfile      = $wsbase."inc/dbsetup.php";
$systemconfig     = $wsbase."systemconfig.php";
$postgisfolder    = "/usr/share/postgresql/".$postgresversion."/contrib/postgis-".$postgisversion."/";
/*******************************************************************/;

// Depending on command line arguments run different functions

if(isset($args["auto-configure"]))
{
    echo "Configuring Tellervo Server with default settings";
	requireRoot();

	exec("chown -R www-data:www-data /usr/share/tellervo-server/mediastore");

	// Check if the server is already configured
	if( (file_exists($configfile)) && (file_exists($dbsetupfile)) )
	{
		// Include config files as they already exist
		include($configfile);
		include($dbsetupfile);

		// Verify if the configuration is already ok
		if(verifySetup(TRUE)===TRUE)
		{
			// setup already done so display and close
			echo "Configuration complete\n\n";
			verifySetup();
			printComplete();
			exit(0);
		}
	}

	// Setup not yet ok so configure from scratch
	createScriptsFromTemplates(TRUE);
	postgresSetup(TRUE);
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	include($systemconfig);
	runDBUpgrades(true);
	apacheSetup(true);
	verifySetup();
	printComplete();
	exit(0);

}
else if(isset($args["add-wms-name"]) && isset($args["add-wms-url"]) &&
   $args["add-wms-name"]!=null && $args["add-wms-url"]!=null)
{
	requireRoot();
	$name = $args["add-wms-name"];
	$url = $args["add-wms-url"];
	include($configfile);
	include($dbsetupfile);
	include($systemconfig);

	if(file_exists($url))
	{
		addWMS($name, $url);
	}
	else
	{
		echo "The WMS server URL you supplied is not valid";
		die();
	}

	die();
}
else if(isset($args["upgrade"]) || isset($args["u"]))
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	include($systemconfig);
	downloadAndInstallUpgrade();
	die();
}
else if(isset($args["del-wms-name"]) && $args["del-wms-name"]!=null)
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	include($systemconfig);
	delWMS($args["del-wms-name"]);
	die();
}
else if(isset($args["backup-db"]) && $args["backup-db"]!=null)
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	$dbfilename = $args["backup-db"];
	backupDB($dbfilename);
	die();
}
else if(isset($args["restore-db"]) && $args["restore-db"]!=null)
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	$dbfilename = $args["restore-db"];

	// If filename doesn't include path, then add current folder
	if(substr($dbfilename, 0, 1)!="/")
	{
		$dbfilename = getcwd()."/".$dbfilename;
	}

	restoreDB($dbfilename);

	echo "Database restore complete\n";
	verifySetup();
	printComplete();
	die();
}

else if(isset($args["test"]) || isset($args["t"]))
{
	// Test configuration
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	verifySetup();
	printComplete();
}
else if(isset($args["firstrun"]))
{
	// Configure server for first run
	$colors = new Colors();

	echo $colors->getColoredString("\n\nStep 4 - Setting up the Tellervo database...\n\n", "light_purple");
	requireRoot();
	// Make sure media store is accessible to www-data

	createScriptsFromTemplates();
	postgresSetup(true);
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	include($systemconfig);
	runDBUpgrades(true);
	generateSystemsConfig();
	include($systemconfig);
	echo $colors->getColoredString("\n\nStep 5 - Configuring the Apache webservice...\n\n", "light_purple");
	apacheSetup();
	echo $colors->getColoredString("\n\nStep 6 - Verifying setup...\n\n", "light_purple");
	verifySetup();
	printComplete();
	exec("$folderbase/firstrun");
	exit(0);
}
else if(isset($args["deploy"]))
{
	requireRoot();

	echo "Deleting any existing config files...\n\n";
	if (file_exists("$folderbase/firstrun"))
	{
		exec("rm $folderbase/firstrun");
	}
	if (file_exists("$wsbase/config.php"))
	{
		exec("rm $wsbase/config.php");
	}
	if (file_exists("$wsbase/systemconfig.php"))
	{
		exec("rm $wsbase/systemconfig.php");
	}
	if (file_exists("/etc/update-motd.d/50-landscape-sysinfo"))
	{
		exec("rm /etc/update-motd.d/50-landscape-sysinfo");
	}
	if (file_exists("/etc/update-motd.d/10-help-text"))
	{
		exec("rm /etc/update-motd.d/10-help-text");
	}
	if (file_exists("/etc/update-motd.d/91-release-upgrade"))
	{
		exec("rm /etc/update-motd.d/91-release-upgrade");
	}
	if (file_exists("/usr/share/tellervo-server/server_credentials"))
	{
		exec("rm /usr/share/tellervo-server/server_credentials");
	}

	echo "Move first run script into place...\n\n";
	if (file_exists("/usr/share/tellervo-server/firstrun.template"))
	{
		exec("cp /usr/share/tellervo-server/firstrun.template /usr/share/tellervo-server/firstrun");
	}

	echo "Installing power interface stuff for clean shutdowns...\n\n";
	exec("apt-get -q -y install acpid");

	removeNetworkPersistence();

	echo "Make sure firstrun gets run on next login...\n\n";
	exec("echo \"\n# Run Tellervo firstrun script if required\nif [ -f /usr/share/tellervo-server/firstrun ]\nthen\n   /usr/share/tellervo-server/firstrun\nfi\" >> ~/.bashrc");
	//exec("su - tellervo -c `history -c`");
	echo "\n\n";
	echo "All pre-deployment steps have been completed\n\n";
	echo "Now shut down this VM, export and release into the wild.\n";
	echo "--- BUT FIRST RUN ---\nhistory -c \n\n";
	exit(0);
}
else if(isset($args["reconfigure"]) || isset($args["r"]))
{
	// Reconfigure server
	requireRoot();

	exec("chown -R www-data:www-data /usr/share/tellervo-server/mediastore");

	// Confirm the user wants to scrub and start from scratch
	echo "\nIf you continue, your existing Tellervo configuration and database will be\n";
	echo "deleted.  Are you sure you want to proceed?  (y/N): ";
    $response = trim(fgets(STDIN));
    if($response!="Y" && $response !="y")
    {
    	exit(0);
    }

	// Delete existing config files
	if (file_exists("$folderbase/firstrun"))
	{
		exec("rm -f $folderbase/firstrun");
	}
	if (file_exists("$wsbase/config.php"))
	{
		exec("rm -f $wsbase/config.php");
	}
	if (file_exists("$wsbase/systemconfig.php"))
	{
		exec("rm -f $wsbase/systemconfig.php");
	}

	createScriptsFromTemplates();
	postgresSetup(true);
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	include($systemconfig);
	runDBUpgrades(true);
	apacheSetup();
	verifySetup();
	printComplete();
	exit(0);
}
else if(isset($args["dockerconfigure"]))
{
	// Reconfigure server
	requireRoot();

	exec("chown -R www-data:www-data /usr/share/tellervo-server/mediastore");

	// Delete existing config files
	if (file_exists("$folderbase/firstrun"))
	{
		exec("sudo rm -f $folderbase/firstrun");
	}
	if (file_exists("$wsbase/config.php"))
	{
		exec("sudo rm -f $wsbase/config.php");
	}
	if (file_exists("$wsbase/systemconfig.php"))
	{
		exec("sudo rm -f $wsbase/systemconfig.php");
	}

	createScriptsFromTemplates(true);
	postgresSetup(true);
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	include($systemconfig);
	runDBUpgrades(true);
	apacheSetup(true);
	verifySetup(true);
	printComplete();
	exit(0);
}
else if(isset($args["sysconfig"]) || isset($args["s"]))
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	exit(0);
}
else if(isset($args["help"]) || isset($args["h"]))
{
    // Show help documentation
  	printHelp();
  	exit(0);
}
else if(isset($args["stop"]))
{
	requireRoot();
	echo "Stopping PostgreSQL...\n";
	exec("/etc/init.d/postgresql stop");
	echo "Stopping Apache...\n";
	exec("service apache2 stop");
	echo "\n\n";
	exit(0);
}
else if(isset($args["start"]))
{
	requireRoot();
	echo "Starting PostgreSQL...\n";
	exec("/etc/init.d/postgresql start");
	echo "Starting Apache...\n";
	exec("service apache2 start");
	echo "\n";
	exit(0);
}
else if(isset($args["restart"]))
{
	requireRoot();
	echo "Restarting PostgreSQL...\n";
	exec("/etc/init.d/postgresql restart");
	echo "Restarting Apache...\n";
	exec("service apache2 restart");
	echo "\n";
	exit(0);
}
else if(isset($args["set-db-pwd"]))
{
	requireRoot();
	setDBUser();
	echo "\n";
	exit(0);
}
else if(isset($args["emptylog"]) || isset($args["e"]))
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	emptyLog();
	exit(0);

}
else if(isset($args["upgrade-db"]))
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	runDBUpgrades();
	exit(0);
}
else if (isset($args["configure"]) || isset($args["c"]))
{
	// Configure
	requireRoot();

	exec("chown -R www-data:www-data /usr/share/tellervo-server/mediastore");

	// Check if the server is already configured
	if( (file_exists($configfile)) && (file_exists($dbsetupfile)) )
	{
		// Include config files as they already exist
		include($configfile);
		include($dbsetupfile);

		// Verify if the configuration is already ok
		if(verifySetup(TRUE)===TRUE)
		{
			// setup already done so display and close
			echo "Configuration complete\n\n";
			verifySetup();
			printComplete();
			exit(0);
		}
	}

	// Setup not yet ok so configure from scratch
	createScriptsFromTemplates();
	postgresSetup();
	include($configfile);
	include($dbsetupfile);
	generateSystemsConfig();
	include($systemconfig);
	runDBUpgrades(true);
	apacheSetup();
	verifySetup();
	printComplete();
	exit(0);
}
else if (isset($args["version"]) || isset($args["v"]))
{
	include($configfile);
	include($dbsetupfile);
	echo "\n";
	printTitle();
	echoTruncatedString("Tellervo Database", 20);
	echo " - version ".getTellervoDBVersion()."\n";
	echo "\n";
	exit(0);
}
else if (isset($args["info"]))
{
	include($configfile);
	include($dbsetupfile);
	echo "\n";
	printTitle();
	echo "\n";
	exit(0);
}
else if (isset($args["network"]) || isset($args["n"]))
{
	requireRoot();

	writeLogMsg("Checking network is configured correctly...");
	require("$configfile");

	$thisip = getIP();

	echo "\n";

	if($ip=="$thisip")
	{
		echo " Network settings appear to require no changes...\n";
		writeLogMsg("IP of server doesn't appear to have changed: $ip");
	}
	else
	{
	    writeLogMsg("Network settings appear to have changed");
	    writeLogMsg("Updating config files accordingly...");
	    writeLogMsg("Switching '$ip' to '$thisip'");
	    $snr = new File_SearchReplace("ip = \"$ip\"",
                           			"ip = \"$thisip\"",
			      					$configfile,
                              		'', // directorie(s) to search
                              		false) ;
        $snr->doSearch();

        removeNetworkPersistence();

	}


	require("$configfile");
	require("$dbsetupfile");
	require("$systemconfig");
	verifySetup();
	printComplete();

	if($setupsuccessful)
	{
	 	exit(0);
	}
	else
	{
		exit(1);
	}
}
else if (isset($args["set-admin-pwd"]))
{
	requireRoot();
	setAdminPwd();
	echo "\n";
	exit(0);
}
if(isset($args["cascade-delete"]) && $args["cascade-delete"]!=null)
{
	requireRoot();
	include($configfile);
	include($dbsetupfile);
	include($systemconfig);
	setCascadeDeleteEnabled($args["cascade-delete"]);
	exit(0);
}


printHelp(true);
exit(1);

/**
 * END OF SCRIPT BODY
 */



function backupDB($dbfilename)
{
	global $dbname;

	echo "Backing up database...\n";
	exec("pg_dump -Fc -U tellervo ".$dbname." > ".$dbfilename, $output, $returnvar);
	if($returnvar>=2)
	{
		echo "Backup failed";
		exit($returnvar);
	}
	else
	{
		echo "Database successfully backed up to '".$dbfilename."'\n";
	}

	return true;
}

/**
 * Restore a previously created database dump.  File needs to have been created with 'pg_dump -Fc'.
 * PostGIS, PLJava and any database upgrade patches will be applied to bring the database up to
 * the current version.
 *
 * @param unknown $dbfilename
 */
function restoreDB($dbfilename)
{
	global $postgisfolder;
	global $dbconn;
	global $logfile;
	global $dbsetupfile;
	global $upgradeScripts;
	global $dbname;
	global $systemconfig;

	if(!is_readable($dbfilename)) {
		echo "Specified database backup file '$dbfilename' does not exist\n";
		exit(0);
	}

	if(!is_writeable($dbfilename)) {
		echo "Database backup file is not in a writeable folder.\n";
		echo "Try copying into '/tmp/' and try again.\n";
		exit(0);
	}

	echo "\nThis procedure will overwrite any existing Tellervo database.\nAre you sure you want to continue?\n";
	echo "   (y/N): ";
	$response = trim(fgets(STDIN));
	if($response!="Y" && $response !="y")
	{
		exit(0);
	}


	$postgisrestore = $postgisfolder."postgis_restore.pl";
	$postgissql = $postgisfolder."postgis.sql";
	$postgisspatialrefsys = $postgisfolder."spatial_ref_sys.sql";
	$postgislegacy = $postgisfolder."legacy.sql";

	if(!file_exists($postgisfolder) || !file_exists($postgisrestore) || !file_exists($postgissql)
			|| !file_exists($postgisspatialrefsys) || !file_exists($postgislegacy)){
		echo "Unable to find PostGIS upgrade files\n";
		exit(0);
	}

	// Check if tellervo database exists.  If it does then check about deleting it
	if(doesTellervoDBExist() === false)
	{
		// Tellervo database doesn't currently exist
	}
	else
	{
		// Tellervo database DOES exist
		pg_close($dbconn);
		echo"\nDeleting existing database...\n";
		exec("su - postgres -c \"dropdb ".$dbname."\"", $output, $returnvar);
		if($returnvar>=1) {
			echo "\nUnable to restore database until existing database is removed.\n";
			echo "Please ensure all database connections are closed, then try again.\n";
			die();
		}
	}


	echo "\nCreating database...\n";
	exec("su - postgres -c \"createdb ".$dbname." 2>> ".$logfile."\"");
	echo "\nApplying PostGIS upgrade patches...\n";
    exec("su - postgres -c \"psql -d ".$dbname." -f ".$postgissql." 2>> ".$logfile."\"");
    exec("su - postgres -c \"psql -d ".$dbname." -f ".$postgisspatialrefsys." 2>> ".$logfile."\"");
    exec("su - postgres -c \"psql -d ".$dbname." -f ".$postgislegacy." 2>> ".$logfile."\"");
    echo "\nConfiguring PLJava extension.\n";
    exec("su - postgres -c \"psql -d ".$dbname." -f ".$upgradeScripts."/database_upgrade-1.3.0e.notransaction.sql 2>> ".$logfile."\"");
    echo "\nApplying PostGIS upgrade patches.  This could take some time on larger databases...\n";
    shell_exec("su - postgres -c \"".$postgisrestore." ".$dbfilename." | psql ".$dbname." 2>> ".$logfile."\"");
    echo "\nFinalising PLJava extension configuration...\n";

	include($dbsetupfile);
    echo "\nRegenerating systems config file\n";
    generateSystemsConfig();
	include($systemconfig);

	// Now insert record into upgradelog so patch that was already run won't be re-run
	$sql = "INSERT into tblupgradelog (filename) VALUES ('database_upgrade-1.3.0e.notransaction.sql');";
	$result = pg_query($dbconn, $sql);
	if(!$result)
	{
		writeLogMsg("Unable to add patch name to upgradelog" );
	}

	// Run remaining upgrade patches
    runDBUpgrades(true);
   	return;

}

/**
 * Set the password for the default Tellervo desktop admin user.
 *
 * @return boolean
 */
function setAdminPwd()
{
	//include '$systemconfig';

	// Confirm the user wants to reset the admin user pwd
	echo "\nAre you sure you want to reset the admin user password?\n";
	echo "   (y/N): ";
    $response = trim(fgets(STDIN));
    if($response!="Y" && $response !="y")
    {
    	exit(0);
    }


      echo "\nPlease create a password for the admin user to use when logging in with the \n";
      echo   "Tellervo desktop application. The password should be 8-20 characters, and \n";
      echo   "include numbers, letters, and capitals but no spaces.\n";
      $pwd = promptForPwd();

      $sql = "UPDATE tblsecurityuser set password=digest('$pwd', 'sha512') where username='admin'";

	    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
	    {
			pg_send_query($dbconn, $sql);
		    $result = pg_get_result($dbconn);
			$error= pg_result_error($result);
			if($error)
			{
				echo "Failed to reset admin users password\n";
				echo $error."\n";

			}
			else
			{
	    		echo "Admin password successfully reset\n";
	    		return true;
	    	}
	    }
	    else
	    {
	    	die("Unable to connect to PostgreSQL database.\n\n");
	    }

	    return false;

}

/**
 *  Download the latest version of Tellervo Server from the website and install
 *
 */
function downloadAndInstallUpgrade()
{
	$url = "http://www.tellervo.org/download/?type=server\&os=linux\&version=latest";

	exec("wget --output-document /tmp/new.deb $url");
	passthru("dpkg --install /tmp/new.deb");
	exec("rm /tmp/new.deb");
	passthru("tellervo-server --version");
}


/**
 * Delete the Web Mapping Server with the specified name from database
 *
 * @param unknown $name
 * @return boolean
 */
function delWMS($name)
{

	global $dbconn;

	$sql = "DELETE FROM tlkpwmsserver where name='$name';";
	$dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
	pg_send_query($dbconn, $sql);
    	$result = pg_get_result($dbconn);
	$error= pg_result_error($result);
	if($error)
	{
		echo "Failed to delete WMS server from database\n";
		echo $error."\n";

	}
	else
	{
    		echo "WMS server deleted from database\n";
    	}
    }
    else
    {
    	die("Unable to connect to PostgreSQL database.\n\n");
    }

    return false;
}


/**
 * Add a Web Mapping Server to the database.
 *
 * @param String $name - human readable name for server
 * @param String $url  - WMS URL
 * @return boolean
 */
function addWMS($name, $url)
{
	global $dbconn;

	$sql = "INSERT INTO tlkpwmsserver (name, url) VALUES ('$name', '$url');";
	$dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
	pg_send_query($dbconn, $sql);
    	$result = pg_get_result($dbconn);
	$error= pg_result_error($result);
	if($error)
	{
		echo "Failed to add WMS server to database\n";
		echo $error."\n";

	}
	else
	{
    		echo "WMS server added to database\n";
    	}
    }
    else
    {
    	die("Unable to connect to PostgreSQL database.\n\n");
    }

    return false;
}

/**
 * Print the program name and version
 */
function printTitle()
{
  echoTruncatedString("Tellervo Server", 20);
  echo " - version ".getTellervoDPKGVersion()."\n";
}

/**
 * Print the standard help information to the console.  If forced is true then the script exists with an error.
 * This is used to show a user they have given incorrect parameters.
 *
 * @param string $forced
 */
function printHelp($forced=false)
{
  echo "\n";
  printTitle();
  echo "\nUseage: tellervo-server [<option> ...]\n";
  echo "e.g:\n";
  echo "  tellervo-server --configure\n";
  echo "  tellervo-server --reconfigure\n";
  echo "  tellervo-server -c\n";
  echo "  tellervo-server --add-wms-name \"New Server\" --add-wms-url \"http://...\"\n";
  echo "  tellervo-server --del-wms-name \"Server to delete\"\n";
  echo "\nOptions:\n";
  echo "  -h, --help            Show this help\n";
  echo "  -v, --version         Show version of Tellervo server that is installed\n";
  echo "  -t, --test           *Run tests on existing setup\n";
  echo "  -c, --configure      *Configure server\n";
  echo "  -r, --reconfigure    *Reconfigure the server overwriting existing config\n";
  echo "  -u, --upgrade        *Download and install latest version of tellervo-server\n";
  echo "  -n, --network        *Check network settings and reset if necessary\n";
  echo "  -e, --emptylog       *Clean the log files and database tables\n";
  echo "  -s, --sysconfig      *Generate the systems configuration file\n";
  echo "      --set-db-pwd     *Reset the PostgreSQL database password\n";
  echo "      --set-admin-pwd  *Reset the Tellervo desktop login for the admin user\n";
  echo "      --start          *Start the Tellervo server\n";
  echo "      --stop           *Stop the Tellervo server\n";
  echo "      --restart        *Restart the Tellervo server\n";
  echo "      --upgrade-db     *Run database upgrade scripts\n";
  echo "      --add-wms-name   *Name of a web mapping server to add to database\n";
  echo "      --add-wms-url    *URL of a web mapping server to add to database\n";
  echo "      --del-wms-name   *Name of a web mapping server to delete from database\n";
  echo "      --backup-db      *Backup database to the specified file\n";
  echo "      --restore-db     *Restore database from specified file\n";
  echo "      --cascade-delete *Either true or false to enabled/disable cascade delete\n";
  //echo "      --dbname          Specify nonstandard database name [experimental]\n";
  //echo "      --webfolder       Specify nonstandard Apache webfolder [experimental]\n";
  echo "\n";
  echo "  * Root or sudo privileges are required to run these commands\n";
  echo "\n";

  if(forced) exit(1);

  exit(0);

}

/**
*  Write message to log file
*/
function writeLogMsg($message, $errType="INFO")
{
	global $logfile;
	$cmd = "echo \"".date(DATE_ATOM)." - ".truncateString($errType, 9).":  $message\" >> $logfile";
	exec($cmd);
}

/**
* Run any applicable upgrade scripts
*/
function runDBUpgrades($skipbackup=false)
{
	global $upgradeScripts;
	global $logfile;
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;
	global $dbname;

	require($configfile);
	require($dbsetupfile);
	require($systemconfig);

	$scriptsRun = 0;

	echo "Upgrading existing Tellervo database to latest version...\n";

	// Backup db
	if($skipbackup!=TRUE) {
		echo "\nWould you like to backup your database before upgrading?\n";
		echo "   (Y/n): ";
		$response = trim(fgets(STDIN));
		if($response!="N" && $response !="n")
		{
			backupDB("/usr/share/tellervo-server/".$dbname."-".date('Ymd')."-preupgrade.backup");
		}
	}

	writeLogMsg("*******************");
    writeLogMsg("Upgrading existing Tellervo database to latest version...");
    writeLogMsg("*******************");

	// Loop through all upgrade scripts and run any that haven't
	// already been run

	$upgradeScriptFailed = false;

	if (is_dir($upgradeScripts))
	{
		$files = scandir($upgradeScripts);

		// This is how you sort an array, see http://php.net/sort
		natsort($files);

		// There's no need to use a directory handler, just loop through your $files array.
		foreach ($files as $file) {
			// Ignore directories and hidden files
	        if ($file != "." && $file != ".." && strpos($file, ".")!=0)
		    {
		      	$result = runSQLUpgradeFile($file);
		      	if($result){
		      		$scriptsRun++;
		      	} else {
		      		$upgradeScriptFailed = true;
		      		break;
		      	}

	        }
		}
	}

	if($upgradeScriptFailed===TRUE)
	{
		die("There was an error applying an upgrade scripts so the upgrade has been halted.\nWe will need to investigate what went wrong before we can complete the upgrade.\nPlease contact the Tellervo developers for assistance.\n\n");
	}

	generateSystemsConfig();

	$f = getTellervoDPKGVersion();

	// Remove +SNAPSHOT from end
	$f = str_replace("+SNAPSHOT", "", $f);

	$sql = "UPDATE tblconfig SET value='$f' where key='wsversion'";
        $dbconnstatus = pg_connection_status($dbconn);
	if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
	    $result = pg_query($dbconn, $sql);
    }
    else
    {
	    die("Unable to connect to PostgreSQL database to update the version information\n\n");
    }

    if($scriptsRun==0)
    {
    	echo "Database was up-to-date.  No upgrade scripts were run\n";
    }
    else
    {
   	echo "Database upgrade complete.\n";
    	echo "Database now at version ".trim($f).".\n";
    }

	generateSystemsConfig();
	include($systemconfig);
}

/**
 * Get the version of Tellervo according to dpkg.
 *
 * @return version
 */
function getTellervoDPKGVersion()
{
	$f = exec("dpkg-query -W tellervo-server");

	if(strpos($f, "No packages found")===TRUE)
	{
	 return false;
	}

	// Trim off the 'tellervo-server' from the beginning
	$f = str_replace("tellervo-server", "", $f);

	return trim($f);
}

/**
* Get the version of Tellervo installed from the database.  If the database is not
* available then returns 'Unknown'
*/
function getTellervoDBVersion()
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;

	include($systemconfig);

	$sql = "SELECT value FROM tblconfig WHERE key='wsversion'";
    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$result = pg_query($dbconn, $sql);
        while ($row = pg_fetch_array($result))
	  	{
	     	   return trim($row['value']);
	  	}
    }

	return "Unknown";
}


function runSQLFile($filename, $helptext)
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;
	global $logfile;
	global $upgradeScripts;
	global $dbname;
	$colors = new Colors();

	// Running standard SQL patch in a transaction
    		pg_query($dbconn, "BEGIN WORK");

    	    echoTruncatedString("    - ".$helptext);
    	    $sql = file_get_contents($filename);

	    	$result = pg_query($dbconn, $sql);

	    	if(!$result)
	    	{
		    	echo $colors->getColoredString("FAILED", "red");
	    		echo "\n";

	    		writeLogMsg("Error running script '".escapeshellcmd($filename)."'" );

    			// Only run in transaction if safe
    			pg_query($dbconn, "ROLLBACK");

	    		return false;
	    	}
	    	else
	    	{


				// All is well so go ahead and commit the entire thing to the database
	    		pg_query($dbconn, "COMMIT");
		    	echo $colors->getColoredString("SUCCESS", "green");
	    		echo "\n";
			    return true;
	    	}

}

/**
 * Run the SQL filename provided to upgrade the database
 *
 * Returns true if file was run successfully (or has already been installed) and false if it failed.
 * The entire thing is performed as a transaction so if there is any trouble (including writing
 * to the upgrade log) then the entire upgrade file is rolled back.
 *
 * @param unknown $filename
 * @return boolean
 */
function runSQLUpgradeFile($filename)
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;
	global $logfile;
	global $upgradeScripts;
	global $dbname;
	$colors = new Colors();

	$sql = "SELECT * FROM tblupgradelog WHERE filename = '$filename'";
	$dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$result = pg_query($dbconn, $sql);
    	if(pg_num_rows($result)>=1) return true;
    }
    else
    {
    	die("Unable to connect to PostgreSQL database to run upgrade.\n\n");
    }

	$sql = file_get_contents($upgradeScripts."/".$filename);

	writeLogMsg("Upgrading database with SQL \n ".escapeshellcmd($sql));

    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	if(strpos($filename, ".notransaction.")===FALSE)
    	{
    		echoTruncatedString("    - Applying patch: $filename...");

    		// Running standard SQL patch in a transaction
    		pg_query($dbconn, "BEGIN WORK");


	    	$result = pg_query($dbconn, $sql);

	    	if(!$result)
	    	{
		    	echo $colors->getColoredString("FAILED", "red");
	    		echo "\n";

	    		writeLogMsg("Error running upgrade script '".escapeshellcmd($filename)."'" );

    			// Only run in transaction if safe
    			pg_query($dbconn, "ROLLBACK");

	    		return false;
	    	}
	    	else
	    	{
	    		// Database patched successfully
	    		// Now insert record into upgradelog
	    		$sql = "INSERT into tblupgradelog (filename) VALUES ('$filename');";
			    $result = pg_query($dbconn, $sql);

			    if(!$result)
		    	{
		    	    echo $colors->getColoredString("WARNING", "yellow");
	    			echo "\n\n";

		    		writeLogMsg("Unable to add patch name to upgradelog" );
		    		//writeLogMsg(escapeshellcmd($error));

		    		if(strpos($filename, ".notransaction.")!==FALSE)
		    		{
		    			// Only run in transaction if safe
		    			pg_query($dbconn, "ROLLBACK");
		    		}
		    		return false;
		    	}

				// All is well so go ahead and commit the entire thing to the database
	    		pg_query($dbconn, "COMMIT");
		    	echo $colors->getColoredString("PASSED", "green");
	    		echo "\n";
			    return true;
	    	}
    	}
    	else
    	{
    		echoTruncatedString("    - Applying patch: $filename...");

			// This file cannot be run in a transaction or multi-line command
			// File needs to be run from command line instead

    		$cmd = "su - postgres -c \" psql $dbname -f ".$upgradeScripts."/".$filename." 2>> ".$logfile."\"";
    		exec($cmd, $resp, $return);

    		if($return!=0)
    		{
    			echo $colors->getColoredString("FAILED", "red");
    			echo "\n";
    			writeLogMsg("Error running upgrade script '".escapeshellcmd($filename)."'" );
    			return false;
    		}
    		else
    		{
    			// Database patched successfully
    			// Now insert record into upgradelog
    			$sql = "INSERT into tblupgradelog (filename) VALUES ('$filename');";
    			$result = pg_query($dbconn, $sql);

    			if(!$result)
    			{
    				echo $colors->getColoredString("WARNING", "yellow");
    				echo "\n\n";

    				writeLogMsg("Unable to add patch name to upgradelog" );
    				return false;
    			}

    			echo $colors->getColoredString("PASSED", "green");
    			echo "\n";
    			return true;
    		}
    	}
    }
    else
    {
    	die("Unable to connect to PostgreSQL database to run upgrade.\n\n");
    }
}





/**
* Flush the log tables of all entries older than 1 week
*/
function emptyLog()
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;
	global $logfile;




	echo "\nDeleting database log entries prior to the last 7 days...\n";

	$sql = "DELETE FROM tbliptracking where timestamp > (CURRENT_DATE - INTERVAL '1 week');
	        DELETE FROM tblrequestlog where createdtimestamp > (CURRENT_DATE - INTERVAL '1 week');";
    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$result = pg_query($dbconn, $sql);
    }
    else
    {
    	die("Unable to connect to PostgreSQL database.\n\n");
    }

    echo "\nCleaning server log file...\n";
    unlink($logfile);

    echo "\nAll Done\n";


}


/**
 * Does current user have root privileges?
 */
function hasRootPrivileges()
{
        $userinfo = posix_getpwuid(posix_geteuid());

        if($userinfo["name"]=='root')
        {
                return true;
        }

        return false;
}

/**
 * Check the user running this script is a superuser
 */
function requireRoot()
{
	if(!hasRootPrivileges())
	{
		$colors = new Colors();
		echo $colors->getColoredString("\nRoot or sudo privileges are required to run this script.  Currently running as ".$_SERVER['USER']." \n\n", "red");
		die();
	}
}


/**
 * Only run this after config.php file has been generated
 */
function generateSystemsConfig()
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;
	require($configfile);
	require($dbsetupfile);

	echo "\nGenerating systems config file...\n";

	// Create the file
	$fh = fopen($systemconfig, 'w') or exit("Can't create system configuration file\n\n");
	fwrite($fh, "<?php
/**
* This configuration file is automatically generated by the tellervo-server
* configure script.  Do not make changes to this file!
* Generated : ".date(DATE_RFC822)."
*/\n\n");

	$sql = "SELECT * FROM tblconfig";
    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$result = pg_query($dbconn, $sql);
        while ($row = pg_fetch_array($result))
        {
			fwrite($fh, "// ".$row['description']."\n");
			fwrite($fh, "$".$row['key']." = \"".$row['value']."\";\n\n");
        }
    }
    else
    {
    	global $conn_string;
    	echo "Failed to connect to PG\n";
    	echo $conn_string."\n";
    	exit("Unable to connect to PostgreSQL database.\n\n");
    }

	$sql = "SELECT * FROM tblsupportedclient";
    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$xstr = "";
    	$result = pg_query($dbconn, $sql);
        while ($row = pg_fetch_array($result))
        {
			$xstr.="\n   array(\"name\" => \"".$row['client']."\", \"minVersion\" => \"".$row['minversion']."\"),";
        }
        $xstr = substr($xstr, 0, -1);
        fwrite($fh, "// Array of known clients and the minimum version that can be used when accessing this webservice\n");
        fwrite($fh, "$"."tellervoClientIdentifiers = array( $xstr \n);\n\n");
    }
    else
    {
    	exit("Unable to connect to PostgreSQL database.\n\n");
    }

	fwrite($fh, "\n\n//END OF FILE\n?>");
	fclose($fh);
}


/**
 *  Check that the specified service is running
 */
function checkServiceIsRunning($service)
{
  $response = shell_exec("ps ax");
  if(strlen(strstr($response, $service))>0)
  {
    return TRUE;
  }
  else
  {
    return FALSE;
  }
}

/**
 * Create script files by copying from templates and alter basic info
 */
function createScriptsFromTemplates($auto=false)
{
  global $permsfile;
  global $permstemplate;
  global $configfile;
  global $configtemplate;
  global $logfile;
  global $database;
  global $pg_hba_file;
  global $pg_hba_file_orig;
  global $wsbase;
  global $postgresversion;

  if(!file_exists($wsbase)) mkdir($wsbase);

  exec("cp $permstemplate $permsfile >> $logfile" );
  exec("cp $configtemplate $configfile >> $logfile" );
  setConfigVariable("%%IP%%", getIP());

  if($auto===TRUE)
  {
  	  $response = "Dev Server";
  }
  else
  {
	  echo "\nPlease enter the name of your laboratory : ";
	  $response = fgets(STDIN);
  }
  setConfigVariable("%%LABNAME%%", trim($response, "\n\r"));

  if($auto===TRUE)
  {
    $response = "";
  }
  else
  {
  	echo "\nPlease enter a code/acronym for your lab e.g. C for Cornell : ";
  	$response = fgets(STDIN);
  }
  setConfigVariable("%%LABACRONYM%%", trim($response, "\n\r"));


  if($auto===TRUE)
  {
     $response = "devserver";
  }
  else
  {
	  echo "\nPlease enter a unique 'domain' for your database.  This should normally be the\n";
	  echo   "domain name of your lab's website (e.g. dendro.cornell.edu), but can be any\n";
	  echo   "name as long as it is unique and doesn't contain spaces : ";
	  $response = fgets(STDIN);
  }
  setConfigVariable("%%DOMAIN%%", trim($response, "\n\r"));

  // Set timezone from system
  setConfigVariable("%%TIMEZONE%%", trim(file_get_contents('/etc/timezone')));

  // Set web folder base
  setConfigVariable("%%WSBASE%%", $wsbase);

  // Set the pg_hba location
  if (file_exists("/etc/postgresql/".$postgresversion."/main/pg_hba.conf"))
  {
  	$pg_hba_file = "/etc/postgresql/".$postgresversion."/main/pg_hba.conf";
  	$pg_hba_file_orig = "/etc/postgresql/".$postgresversion."/main/pg_hba.conf.bak";
  }


  echo "\n";
  // Back up pg_hba file if it hasn't been already
  if(!file_exists($pg_hba_file_orig))
  {
     //exec("sudo -u postgres sh -c \"cp $pg_hba_file $pg_hba_file_orig >> $logfile\"" );
     exec("su - postgres -c \"cp $pg_hba_file $pg_hba_file_orig >> $logfile\"" );

  }

}

/**
 * Get the IP address of this computer
 */
function getIP()
{
  //exec("ifconfig $1 | grep \"inet addr\" | awk -F: '{print $2}' | awk '{print $1}'", $response);
  exec('ip -o route get 8.8.8.8 | sed -e "s/^.* src \([^ ]*\) .*$/\1/"', $response);
  return $response[0];
}

/**
 * Helper function for altering variables in the webservice config.php file
 *
 * @param $var - variable to replace
 * @param $value - value to replace it with
 */
function setConfigVariable($var, $value)
{
  global $configfile;

  $files_to_search = array($configfile);

  // Search and Replace Arrays
  $snr = new File_SearchReplace($var,
                              $value,
                              $files_to_search,
                              '', // directorie(s) to search
                              false) ;
  $snr->doSearch();
}

/**
 * Interactive script to set up the Postgres database
 */
function postgresSetup($quick=false)
{
  global $logfile;
  global $permsfile;
  global $pg_hba_file;
  global $pg_hba_file_orig;
  global $user;
  global $pwd;
  global $dbtemplate;
  global $credentialsFile;
  global $dbname;

  if($quick)
  {
  	  $response = "y";
  }
  else
  {
	  // Find out if the user wants a new db
	  echo "Would you like the installer to set up a new Tellervo database?\n";
	  echo "    [Y]/n  ";
	  $response = fgets(STDIN);
  }

   if((trim(strtolower($response))=='n') || (trim(strtolower($response))=='no'))
   {
     // User doesn't want a new db so must already have one
     echo "\nWhat is the name of your Tellervo PostgreSQL database? : ";
     $response = fgets(STDIN);

     if(trim($response)=="")
     {
       echo "\nPlease create your Tellervo database then retry this configuration script\n";
       printComplete(FALSE);
     }
     else
     {
       // Set db name in config file
       setConfigVariable("%%DBNAME%%", trim($response, "\n\r"));
       $dbname = $response;

       // Create a new user or get details of an existing one
       setDBUser($quick);

       // Create credentials file
       exec("echo \"username=".$user."\npassword=".$pwd."\" > $credentialsFile");
       exec("chown www-data $credentialsFile");
       exec("chmod o-rwx $credentialsFile");
       exec("chmod g-rwx $credentialsFile");
      }
   }
   else
   {
      // Create a new user or get details of an existing one
      setDBUser($quick);

      // Write to credentials file
      exec("echo \"username=".$user."\npassword=".$pwd."\" > $credentialsFile");
      exec("chown www-data $credentialsFile");
      exec("chmod o-rwx $credentialsFile");
      exec("chmod g-rwx $credentialsFile");

      // Create db user and set permissions
      echo "Setting database permissions...\n";
      $snr = new File_SearchReplace("%%DBUSER%%",
                              trim($user, "\n\r"),
			      $permsfile,
                              '', // directorie(s) to search
                              false) ;
      $snr->doSearch();
      $snr = new File_SearchReplace("%%DBPWD%%",
                              trim($pwd, "\n\r"),
			      $permsfile,
                              '', // directorie(s) to search
                              false) ;
      $snr->doSearch();
      exec("su - postgres -c \"psql --file=/usr/share/tellervo-server/set_database_permission.sql 2>> ".$logfile."\"");
      setConfigVariable("%%DBNAME%%", $dbname);

      // Create the database and populate from the database template
      createDatabase($quick);

      // Set pg_hba.conf file entry
      $pg_hba_str = "local        all      ".trim($user, "\n\r")."                  trust\\n".
                    "host         all      ".trim($user, "\n\r")."   samenet        md5\\n";
      //$command = "sudo -u postgres sh -c \"sed '1 i\\# ADDED BY TELLERVO CONFIG SCRIPT\\n$pg_hba_str' $pg_hba_file_orig > $pg_hba_file\"";
      $command = "su - postgres -c \"sed '1 i\\# ADDED BY TELLERVO CONFIG SCRIPT\\n$pg_hba_str' $pg_hba_file_orig > $pg_hba_file\"";

      exec($command, $resp);

      // Restart postgres
      echo "\nRestarting PostgreSQL...\n";
      exec("/etc/init.d/postgresql restart\n");
   }
}


function doesTellervoDBExist()
{

	global $logfile;
	global $dbtemplate;
	global $dbconn;
	global $dbname;

	$sql = "SELECT 1 AS result FROM pg_database where datname='".$dbname."'";
	$cmd = "su - postgres -c \" psql -c \\\"$sql\\\" \"";

	exec($cmd, $resp);

	if(strpos($resp[2], "1") === false)
	{
		return false;
	}

	return true;

}

/**
 *  Create the Postgres Tellervo database
 */
function createDatabase($auto=false)
{
    global $logfile;
    global $dbtemplate;
    global $dbconn;
    global $dbname;
    global $upgradeScripts;

    if(doesTellervoDBExist() === false)
    {
        // Tellervo database doesn't currently exist
    }
    else
    {
   		// Tellervo database DOES exist

   		if($auto===TRUE)
   		{
   			echo "\n";
   			$colors = new Colors();
			echo $colors->getColoredString("ERROR - Tellervo database already exists.", "red");
   			echo "\nDelete database and try again.\nAuto configure Tellervo Server failed!\n\n";
   			exit(1);
   		}

    		  // Find out if the user wants drop the existing database
	 		  echo "\nWarning - there is an existing Tellervo database. Would you like to delete it\nand create a new one?\n";
			  echo "    y/[N]  ";
	          $response = fgets(STDIN);

	          if((trim(strtolower($response))=='y') || (trim(strtolower($response))=='yes'))
              {
              		// Drop Database
              		pg_close($dbconn);
              		echo"\nDeleting existing database...\n";
              		exec("su - postgres -c \"dropdb ".$dbname."\"", $output, $returnvar);
					if($returnvar>=1) {
						echo "\nUnable to delete existing database.\n";
						echo "Database creation failed.\n";
						die();
					}
    	      }
    	      else
    	      {
    	      		return;
    	      }

    }

    // Create the empty database
    exec("su - postgres -c \"createdb ".$dbname." 2>> ".$logfile."\"");

    echo "\nConfiguring PLJava extension.\n";
    exec("su - postgres -c \"psql -d ".$dbname." -f ".$upgradeScripts."/database_upgrade-1.3.0e.notransaction.sql 2>> ".$logfile."\"");

    echo "\nCreating database.  This could take a while...\n";
    exec("su - postgres -c \"pg_restore --dbname=".$dbname." $dbtemplate 2>> ".$logfile."\"");

    //runDBUpgrades();

}

/**
 * Set up the database user either by creating a new user or
 * by getting the credentials of an existing one.
 */
function setDBUser($quick=false)
{
  global $user;
  global $pwd;

  if($quick)
  {
  	$response = "y";
  }
  else
  {
	  echo "\n\nWould you like to create a new database user?\n";
	  echo "    [Y]/n  ";
	  $response = fgets(STDIN);
  }

  if((trim(strtolower($response))=='n') || (trim(strtolower($response))=='no'))
  {
       echo "\nPlease provide details of a PostgreSQL user with full access to this database...\n";
       echo "    Username : ";
       $user = fgets(STDIN);
       $pwd = promptForPwd(FALSE);
  }
  else
  {
      $user = "tellervo";

      if($quick===TRUE)
      {
      	$pwd = random_str(20);
      }
      else
      {
        echo "\nCreate a PostgreSQL password.  This password is used internally within the\n";
        echo   "server and is only required again if you want to access the Tellervo database\n";
        echo   "directly. The password should be 8-20 characters, and include numbers, letters,\n";
        echo   "and capitals but no spaces.\n";
      	$pwd = promptForPwd();
      }
  }
}

/**
 * Interactive script for getting a password.  Checks that the password
 * is strong and asks for it twice to check for typos.
 *
 * @param $isCreating - if true then prompts are tailored to a new password
 *                      otherwise they are for getting existing password
 */
function promptForPwd($isCreating=TRUE)
{
   $pwd1 = prompt_silent("    Password : ");

   if ((!preg_match("#.*^(?=.{8,20})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$#", $pwd1) || strpos($pwd1, " ")))
   {
     echo "Your password is invalid.  Please try again.\n";
     return promptForPwd();
   }

   if($isCreating===TRUE)
   {

	   $pwd2 = prompt_silent("    Repeat   : ");

	   if($pwd1!=$pwd2)
	   {
	      echo "\nPasswords do not match.  Try again!\n";
	      return promptForPwd();
	   }

	   return $pwd1;
   }

   return $pwd1;
}

/**
 * Interactive script for setting up Apache 2 webserver
 */
function apacheSetup($auto=false)
{
  global $logfile;

  if ($auto===TRUE)
  {
  	  $response = "y";
  }
  else
  {
	  echo "\n\nWould you like the installer to configure Apache to run the webservice?\n";
	  echo "    [Y]/n  ";
	  $response = fgets(STDIN);
  }

  if(trim(strtolower($response))=='n')
  {
     return;
  }

  echo "\nSetting up webservice...\n";
  exec("a2ensite tellervo-apache.conf 2>> $logfile", $response);
  exec("a2dissite 000-default.conf 2>> $logfile", $response);

  echo "\nRestarting webserver...\n";
  exec("service apache2 reload");

}

/**
 * Checks whether the config.php file is valid
 */
function isConfigPhpValid()
{
	global $configfile;
	if(fopen($configfile, "r"))
	{
	  // If file contains a % then the search/replace hasn't worked
 	  $contents = file_get_contents($configfile);
	  if(strpos($contents, "%")===false)
	  {
	  	return TRUE;
	  }
	  else
	  {
	  	return FALSE;
	  }
	}
	else
	{
	  return FALSE;
	}

}

/**
 * Check whether the systemsconfig.php file is valid
 */
function isSysConfigValid()
{
  global $systemconfig;

		if(fopen($systemconfig, "r"))
		{
		  // If file is less than 10 lines long it hasn't been filled
	 	  $lines = count(file($systemconfig));
		  if($lines>10)
		  {
		  	return TRUE;
		  }
		  else
		  {
		  	return FALSE;
		  }
		}
		else
		{
		  return FALSE;
		}
}

/**
 * Run checks to see if setup has been successful
 */
function verifySetup($silent=false)
{
  global $wsurl;
  global $systemconfig;
  global $configfile;


  $runningresult = TRUE;

  include($configfile);
  include($systemconfig);

  $ip = getIP();
  global $baseFolder;
  global $securehttp;

  // Compile webservice URL
  if($securehttp===TRUE)
  {
    $wsurl = "https://$ip/";
  }
  else
  {
    $wsurl = "http://$ip/";
  }

  writeLogMsg("Webservice url: $wsurl");

	if($silent)
	{
		if(checkServiceIsRunning("apache2")==FALSE) return FALSE;
		if(checkServiceIsRunning("postgres")==FALSE) return FALSE;
		if(!fopen($wsurl, "r")) return FALSE;
		if(!fopen($cdbCredentialsFile, "r")) return FALSE;
		if(isSysConfigValid()===FALSE) return FALSE;
		if(isConfigPhpValid()===FALSE) return FALSE;
	}
	else
	{
		echoTruncatedString("    - Checking Apache is running:");
		printResult(checkServiceIsRunning("apache2"));
		if(checkServiceIsRunning("apache2")===FALSE) $runningresult = FALSE;

		echoTruncatedString("    - Checking PostgreSQL is running:");
		printResult(checkServiceIsRunning("postgres"));
		if(checkServiceIsRunning("postgres")===FALSE) $runningresult = FALSE;

		echoTruncatedString("    - Checking database credentials file is valid:");
		if(fopen($cdbCredentialsFile, "r"))
		{
		  printResult(TRUE);
		}
		else
		{
		  printResult(FALSE);
		  $runningresult = FALSE;
		}

		echoTruncatedString("    - Checking systems configuration file is valid:");
		printResult(isSysConfigValid());
		if(isSysConfigValid()===FALSE) $runningresult = FALSE;

		echoTruncatedString("    - Checking webservice configuration file is valid:");
		printResult(isConfigPhpValid());
		if(isConfigPhpValid()===FALSE) $runningresult = FALSE;

	}

	if($silent!=TRUE) echoTruncatedString("    - Checking connection to PostgreSQL database:");

	$contents = str_replace("\n", "=", file_get_contents($cdbCredentialsFile));
	$myarray = explode("=", $contents, 5);
	$username = $myarray[1];
	$password = $myarray[3];

	//Set up database connection
	$conn_string = "dbname=$dbName user=".$username." password=".$password;
	$dbconn = pg_connect ($conn_string);

	//Date format
	$sql = "set datestyle to 'ISO'";
	pg_query($dbconn, $sql);

	if($silent!=TRUE)
	{
		printResult(!$dbconn===FALSE);
		$runningresult = FALSE;
	}
	else
	{
		if($dbconn===FALSE) return FALSE;
	}

	if($silent!=TRUE)	echoTruncatedString("    - Checking webservice is accessible:");
		if(fopen($wsurl, "r"))
		{
			if(getIP()=="127.0.0.1")
			{
				if($silent!=TRUE) printResult(FALSE);
				$runningresult = FALSE;
			}
			else
			{
		    		if($silent!=TRUE) printResult(TRUE);
		   	}
		}
		else
		{
		    if($silent!=TRUE) printResult(FALSE);
		    $runningresult = FALSE;
		}


	// Check that webservice and database versions are in sync
	if($silent!=TRUE) echoTruncatedString("    - Checking webservice and database versions are in sync:");
	if($silent!=TRUE)
	{
		printResult(getTellervoDPKGVersion()==getTellervoDBVersion());
		if(getTellervoDPKGVersion()!=getTellervoDBVersion())
		{
			//echo "DPKGVersion ='".getTellervoDPKGVersion()."'\n";
			//echo "DBVersion   ='".getTellervoDBVersion()."'\n";
			$runningresult = FALSE;
		}
	}
	else
	{
		if(getTellervoDPKGVersion()!=getTellervoDBVersion()) return FALSE;
	}

	$colors = new Colors();

	if($silent!=TRUE)
	{
		echoTruncatedString("    - Checking server can access the Internet:");
		$connected = haveNetworkConnectivity();
		if($connected===FALSE)
		{
			echo $colors->getColoredString("WARNING", "yellow");
		}
		else
		{
			printResult(TRUE);
		}
	}

	return $runningresult;
}

/**
 * Script for hidding password from console
 */
function prompt_silent($prompt = "Enter Password:") {
  if (preg_match('/^win/i', PHP_OS)) {
    $vbscript = sys_get_temp_dir() . 'prompt_password.vbs';
    file_put_contents(
      $vbscript, 'wscript.echo(InputBox("'
      . addslashes($prompt)
      . '", "", "password here"))');
    $command = "cscript //nologo " . escapeshellarg($vbscript);
    $password = rtrim(shell_exec($command));
    unlink($vbscript);
    return $password;
  } else {
    $command = "/usr/bin/env bash -c 'echo OK'";
    if (rtrim(shell_exec($command)) !== 'OK') {
      trigger_error("Can't invoke bash");
      return;
    }
    $command = "/usr/bin/env bash -c 'read -s -p \""
      . addslashes($prompt)
      . "\" mypassword && echo \$mypassword'";
    $password = rtrim(shell_exec($command));
    echo "\n";
    return $password;
  }
}

/**
 * Custom error handler.  Diverts all errors to log file
 */
function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    global $logfile;
    if (!(error_reporting() & $errno)) {
        // This error code is not included in error_reporting
        return;
    }
    $errType = "MISC PHP ERROR";

    switch ($errno)
    {
    case E_ERROR:
    case E_USER_ERROR:
     $errType = "ERROR";
     break;
    case E_WARNING:
    case E_USER_WARNING:
     $errType = "WARNING";
     break;
    case E_NOTICE:
    case E_USER_NOTICE:
     $errType = "NOTICE";
     break;
    }

	writeLogMsg("File: $errfile, line $errline - $errstr", $errType);
    //error_log("--- ".$errType." - ".$errstr. "\n" , 3, $logfile);
}


function printDefaultLoginWarning()
{
	global $configfile;
    global $systemconfig;
	global $dbsetupfile;
	global $dbconn;

	$sql = "SELECT * FROM tblsecurityuser WHERE username='admin' and password='bd38976c388a4f04381b82a7d6c62ae5'";
    $dbconnstatus = pg_connection_status($dbconn);
    if ($dbconnstatus ===PGSQL_CONNECTION_OK)
    {
    	$result = pg_query($dbconn, $sql);
        while ($row = pg_fetch_array($result))
	  	{
	  		  echo "    Usr - admin\n";
	     	  echo "    Pwd - qu3rcu5\n\n";
	     	  echo "The default administrator login shown above should be changed the first time you\n";
	     	  echo "log in with your Tellervo desktop client.\n";

	  	}
    }

	echo "\n";
}

function printLocalServerWarning()
{

	if(substr(getIP(), 0, 3)=="10.")
	{
		$colors = new Colors();


		echo "*******************************************************************************\n";
		echo " NB : Your server has a private network address.  This means that access will  \n";
		echo "      be limited to local computers.  To enable access via external machines   \n";
		echo "      please read the networking section of the Tellervo manual.               \n";
		echo "*******************************************************************************\n\n";
	}
}

/**
 * Helper function for printing the 'goodbye' line of the script depending
 * on success.
 */
function printComplete($forceSuccess=null)
{
  global $errorsFound;
  global $wsurl;
  global $ip;

  $colors = new Colors();
  echo "\n\n";

  if($forceSuccess===TRUE)
  {
  	echo "Your Tellervo server configuration is valid.  Your webservice is accessible at:\n";
  	echo "    URL - $wsurl\n";
  	printDefaultLoginWarning();
	printLocalServerWarning();
   	exit(0);
  }
  else if ($forceSuccess===FALSE)
  {
        echo $colors->getColoredString("Errors occurred during configuration. Check the error log and try again.", "white", "red");
        echo "\n\n";
        exit(2);
  }
  else if($errorsFound===FALSE)
  {
  	echo "Your Tellervo server configuration is valid.  Your webservice is accessible at:\n";
  	echo "    URL - $wsurl\n";
	printDefaultLoginWarning();
	printLocalServerWarning();
  	exit(0);
  }
  else
  {
        echo $colors->getColoredString("Errors occurred during configuration. Check the error log and try again.", "white", "red");
        echo "\n\n";
        exit(1);
  }
}

/**
 * Print the result of a test
 */
function printResult($res)
{
  global $errorsFound;
  $colors = new Colors();

  if($res===TRUE)
  {
    echo $colors->getColoredString("PASSED", "green")."\n";
  }
  else if ($res===FALSE)
  {
    echo $colors->getColoredString("FAILED", "red")."\n";
    $errorsFound = TRUE;
  }

}

/**
 * Echo a string to the console truncated if longer than $length
 */
function echoTruncatedString($str, $length=70)
{
	echo truncateString($str, $length);
}

/**
*  Truncate a string
*/
function truncateString($str, $length=70)
{
  if(strlen($str)>$length-1)
  {
  	$str = substr($str, 0, $length-4 )."... ";
  }
  else
  {
  	$str = str_pad($str, $length);
  }

  return $str;

}

/**
 *  Writes a string to stderr
 */
function writeStdErr($error)
{
    $STDERR = fopen("php://stderr", "w");
    fwrite($STDERR, $error);
    fclose($STDERR);
}

/**
 * Check prominent websites to see if we have connectivity
 */
function haveNetworkConnectivity()
{
	$command = "ping -c1 google.com";
	exec($command, $result, $returncode);
	if($returncode==0) return true;

	$command = "ping -c1 yahoo.com";
	exec($command, $result, $returncode);
	if($returncode==0) return true;

	$command = "ping -c1 bbc.co.uk";
	exec($command, $result, $returncode);
	if($returncode==0) return true;

	return false;

}


/**
 * Copyright (c) 2002-2005, Richard Heyes
 * All rights reserved.
 *
 * PHP version 4, 5
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  o Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  o Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  o The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category File
 * @package  File_SearchReplace
 * @author   Richard Heyes <richard@phpguru.org>
 * @license  http://www.opensource.org/licenses/bsd-license.php BSD
 * @version  CVS: $Id: SearchReplace.php 304758 2010-10-25 10:29:02Z clockwerx $
 * @link     http://pear.php.net/File_SearchReplace
 */

/**
 * Search and Replace Utility
 *
 * @category File
 * @package  File_SearchReplace
 * @author   Richard Heyes <richard@phpguru.org>
 * @license  http://www.opensource.org/licenses/bsd-license.php BSD
 * @link     http://pear.php.net/File_SearchReplace
 */
class File_SearchReplace
{

    // {{{ Properties (All private)

    var $find;
    var $replace;
    var $files;
    var $directories;
    var $include_subdir;
    var $ignore_lines;
    var $ignore_sep;
    var $occurences;
    var $search_function;
    var $php5;
    var $last_error;

    // }}}
    // {{{ Constructor

    /**
     * Sets up the object
     *
     * @param string $find           The string/regex to find.
     * @param string $replace        The string/regex to replace $find with.
     * @param array  $files          The file(s) to perform this operation on.
     * @param array  $directories    The directories to perform this operation on.
     * @param bool   $include_subdir If performing on directories, whether to
     *                               traverse subdirectories.
     * @param array  $ignore_lines   Ignore lines beginning with any of the strings
     *                               in this array. This
     *                               feature only works with the "normal" search.
     *
     * @access public
     */
    function File_SearchReplace($find, $replace, $files, $directories = '',
                                $include_subdir = true, $ignore_lines = array())
    {

        $this->setFind($find);
        $this->setReplace($replace);
        $this->setFiles($files);

        $this->setDirectories($directories);
        $this->setIncludeSubdir($include_subdir);

        $this->setIgnoreLines((array) $ignore_lines);

        $this->occurences      = 0;
        $this->search_function = 'search';
        $this->php5            = substr(PHP_VERSION, 0, 1) == 5;
        $this->last_error      = '';

    }

    // }}}
    // {{{ getNumOccurences()

    /**
     * Accessor to return the number of occurences found.
     *
     * @access public
     * @return int Number of occurences found.
     */
    function getNumOccurences()
    {
        return $this->occurences;
    }

    // }}}
    // {{{ getLastError()

    /**
     * Accessor for retrieving last error.
     *
     * @access public
     * @return string The last error that occurred, if any.
     */
    function getLastError()
    {
        return $this->last_error;
    }

    // }}}
    // {{{ setFind()

    /**
     * Accessor for setting find variable.
     *
     * @param mixed $find The string/regex to find, or array of strings
     *
     * @access public
     * @return void
     */
    function setFind($find)
    {
        $this->find = $find;
    }

    // }}}
    // {{{ setReplace()

    /**
     * Accessor for setting replace variable.
     *
     * @param mixed $replace The string/regex to replace the find
     * string/regex with, or array of strings
     *
     * @access public
     * @return void
     */
    function setReplace($replace)
    {
        $this->replace = $replace;
    }

    // }}}
    // {{{ setFiles()

    /**
     * Accessor for setting files variable.
     *
     * @param array $files The file(s) to perform this operation on.
     *
     * @access public
     * @return void
     */
    function setFiles($files)
    {
        $this->files = $files;
    }

    // }}}
    // {{{ setDirectories()

    /**
     * Accessor for setting directories variable.
     *
     * @param array $directories The directories to perform this operation on.
     *
     * @access public
     * @return void
     */
    function setDirectories($directories)
    {
        $this->directories = $directories;
    }

    // }}}
    // {{{ setIncludeSubdir

    /**
     * Accessor for setting include_subdir variable.
     *
     * @param bool $include_subdir Whether to traverse subdirectories or not.
     *
     * @access public
     * @return void
     */
    function setIncludeSubdir($include_subdir)
    {
        $this->include_subdir = $include_subdir;
    }

    // }}}
    // {{{ setIgnoreLines()

    /**
     * Accessor for setting ignore_lines variable.
     *
     * @param array $ignore_lines Ignore lines beginning with any of the
     *                            strings in this array. This
     *                            feature only works with the "normal" search.
     *
     * @access public
     * @return void
     */
    function setIgnoreLines($ignore_lines)
    {
        $this->ignore_lines = $ignore_lines;
    }

    // }}}
    // {{{ setSearchFunction()


    /**
     * Function to determine which search function is used.
     *
     * Can be any one of:
     *  normal - Default search. Goes line by line. Ignore lines feature
     *           only works with this type.
     *  quick  - Uses str_replace for straight replacement throughout
     *           file. Quickest of the lot.
     *  preg   - Uses preg_replace(), so any valid regex
     *
     * @param string $search_function The search function that should be used.
     *
     * @access public
     * @return void
     */
    function setSearchFunction($search_function)
    {
        switch($search_function) {
        case 'normal':
            $this->search_function = 'search';
            return true;
            break;

        case 'quick' :
            $this->search_function = 'quickSearch';
            return true;
            break;

        case 'preg'  :
            $this->search_function = 'pregSearch';
            return true;
            break;

        default      :
            $this->last_error = 'Invalid search function specified';
            return false;
            break;
        }
    }

    // }}}
    // {{{ search()

    /**
     * Default ("normal") search routine.
     *
     * @param string $filename The filename to search and replace upon.
     *
     * @access private
     * @return array Will return an array containing the new file contents
     *               and the number of occurences.
     *               Will return false if there are no occurences.
     */
    function search($filename)
    {
        $occurences = 0;

        $lines = file($filename);

        // just for the sake of catching occurences
        $local_find    = $this->getFind();
        $local_replace = $this->getReplace();

        if (empty($this->ignore_lines) && $this->php5) { // PHP5 acceleration
            $lines = str_replace($local_find, $local_replace,
                                      $lines, $occurences);

        } else { // str_replace() doesn't return number of occurences in PHP4
                 // so we need to count them manually and/or filter strings
            $ignore_lines_num = count($this->ignore_lines);



            foreach ($lines as $i => $line) {

                if ($ignore_lines_num > 0) {
                    for ($j = 0; $j < $ignore_lines_num; $j++) {
                        $text = substr($line, 0, strlen($this->ignore_lines[$j]));
                        if ($text == $this->ignore_lines[$j]) {
                            continue 2;
                        }
                    }
                }

                if ($this->php5) {
                    $lines[$i] = str_replace($local_find, $local_replace,
                                                  $line, $counted);

                    $occurences += $counted;
                } else {
                    foreach ($local_find as $fk => $ff) {
                        $occurences += substr_count($line, $ff);
                        if (!is_array($local_replace)) {
                            $fr = $local_replace;
                        } else {
                            $fr = "";
                            if (isset($local_replace[$fk])) {
                                $fr = $local_replace[$fk];
                            }
                        }
                        $lines[$i] = str_replace($ff, $fr, $line);
                    }
                }
            }

        }

        if ($occurences > 0) {
            return array($occurences, implode('', $lines));
        }

        return false;
    }

    // }}}
    // {{{ quickSearch()

    /**
     * Quick search routine.
     *
     * @param string $filename The filename to search and replace upon.
     *
     * @access private
     * @return array Will return an array containing the new file contents
     *               and the number of occurences.
     *               Will return false if there are no occurences.
     */
    function quickSearch($filename)
    {

        clearstatcache();

        $file = file_get_contents($filename);

        $local_find    = $this->getFind();
        $local_replace = $this->getReplace();

        $occurences = 0;

        // logic is the same as in str_replace function with one exception:
        //   if <search> is a string and <replacement> is an array - substitution
        //   is done from the first element of array. str_replace in this case
        //   usualy fails with notice and returns "ArrayArrayArray..." string
        // (this exclusive logic of SearchReplace will not work for php5, though,
        // because I haven't decided yet whether it is bug or feature)

        if ($this->php5) {
            $file = str_replace($local_find, $local_replace, $file, $counted);

            $occurences += $counted;
        } else {
            foreach ($local_find as $fk => $ff) {
                $occurences += substr_count($file, $ff);
                if (!is_array($local_replace)) {
                    $fr = $local_replace;
                } else {
                    $fr = isset($local_replace[$fk]) ? $local_replace[$fk] : "";
                }
                $file = str_replace($ff, $fr, $file);
            }
        }

        if ($occurences > 0) {
            return array($occurences, $file);
        }

        return false;

    }

    // }}}
    // {{{ pregSearch()

    /**
     * Preg search routine.
     *
     * @param string $filename The filename to search and replace upon.
     *
     * @access private
     * @return array Will return an array containing the new file contents
     *               and the number of occurences.
     *               Will return false if there are no occurences.
     */
    function pregSearch($filename)
    {

        clearstatcache();

        $file = file_get_contents($filename);

        $local_find    = $this->getFind();
        $local_replace = $this->getReplace();

        $occurences = 0;

        foreach ($local_find as $fk => $ff) {
            $occurences += preg_match_all($ff, $file, $matches);
            if (!is_array($local_replace)) {
                $fr = $local_replace;
            } else {
                $fr = isset($local_replace[$fk]) ? $local_replace[$fk] : "";
            }
            $file = preg_replace($ff, $fr, $file);
        }

        if ($occurences > 0) {
            return array($occurences, $file);
        }

        return false;

    }

    // }}}
    // {{{ writeout()

    /**
     * Function to writeout the file contents.
     *
     * @param string $filename The filename of the file to write.
     * @param string $contents The contents to write to the file.
     *
     * @access private
     * @return void
     */
    function writeout($filename, $contents)
    {

        if ($fp = @fopen($filename, 'w')) {
            flock($fp, 2);
            fwrite($fp, $contents);
            flock($fp, 3);
            fclose($fp);
        } else {
            $this->last_error = 'Could not open file: '.$filename;
        }

    }

    // }}}
    // {{{ doFiles()

    /**
     * Function called by doSearch() to go through any files that need searching.
     *
     * @param string $ser_func The search function to use.
     *
     * @access private
     * @return void
     */
    function doFiles($ser_func)
    {
        if (!is_array($this->files)) {
            $this->files = explode(',', $this->files);
        }

        foreach ($this->files as $file) {
            if ($file == '.' OR $file == '..') {
                continue;
            }

            if (is_dir($file)) {
                continue;
            }

            $newfile = $this->$ser_func($file);
            if (is_array($newfile)) {
                $this->writeout($file, $newfile[1]);
                $this->occurences += $newfile[0];
            }
        }
    }

    // }}}
    // {{{ doDirectories()

    /**
     * Function called by doSearch() to go through any directories that
     * need searching.
     *
     * @param string $ser_func The search function to use.
     *
     * @access private
     * @return void
     */
    function doDirectories($ser_func)
    {
        if (!is_array($this->directories)) {
            $this->directories = explode(',', $this->directories);
        }

        foreach ($this->directories as $directory) {
            $dh = opendir($directory);
            while ($file = readdir($dh)) {
                if ($file == '.' OR $file == '..') {
                    continue;
                }

                if (is_dir($directory.$file)) {
                    if ($this->include_subdir) {
                        $this->directories[] = $directory.$file.'/';
                        continue;
                    } else {
                        continue;
                    }
                }

                $newfile = $this->$ser_func($directory.$file);
                if (is_array($newfile) == true) {
                    $this->writeout($directory.$file, $newfile[1]);
                    $this->occurences += $newfile[0];
                }
            }
        }
    }

    // }}}
    // {{{ doSearch()

    /**
     * This starts the search/replace off. The behavior of this function will likely
     * to be changed in future versions to work in read only mode. If you want to do
     * actual replace with writing files - use doReplace method instead.
     *
     * @access public
     * @return void
     */
    function doSearch()
    {
        $this->doReplace();
    }

    // }}}
    // {{{ doReplace()

    /**
     * This starts the search/replace off. Call this to do the replace.
     * First do whatever files are specified, and/or if directories are specified,
     * do those too.
     *
     * @access public
     * @return void
     */
    function doReplace()
    {
        $this->occurences = 0;
        if (!empty($this->find)) {
            if (!empty($this->files)) {
                $this->doFiles($this->search_function);
            }

            if (!empty($this->directories)) {
                $this->doDirectories($this->search_function);
            }
        }
    }

    // }}}

    /**
     * Helper method to ensure we always have an array of things to find.
     *
     * @access public
     * @return array
     */
    function getFind()
    {
        return array_values((array) $this->find);
    }

    /**
     * Helper method to fetch replace
     *
     * @access public
     * @return mixed
     */
    function getReplace()
    {
        if (is_array($this->replace)) {
            return array_values($this->replace);
        }

        return $this->replace;
    }
}


	/**
	 * Class for printing colors in a terminal
	 */
	class Colors {
		private $foreground_colors = array();
		private $background_colors = array();

		public function __construct() {
		// Set up shell colors
		$this->foreground_colors['black'] = '0;30';
		$this->foreground_colors['dark_gray'] = '1;30';
		$this->foreground_colors['blue'] = '0;34';
		$this->foreground_colors['light_blue'] = '1;34';
		$this->foreground_colors['green'] = '0;32';
		$this->foreground_colors['light_green'] = '1;32';
		$this->foreground_colors['cyan'] = '0;36';
		$this->foreground_colors['light_cyan'] = '1;36';
		$this->foreground_colors['red'] = '0;31';
		$this->foreground_colors['light_red'] = '1;31';
		$this->foreground_colors['purple'] = '0;35';
		$this->foreground_colors['light_purple'] = '1;35';
		$this->foreground_colors['brown'] = '0;33';
		$this->foreground_colors['yellow'] = '1;33';
		$this->foreground_colors['light_gray'] = '0;37';
		$this->foreground_colors['white'] = '1;37';

		$this->background_colors['black'] = '40';
		$this->background_colors['red'] = '41';
		$this->background_colors['green'] = '42';
		$this->background_colors['yellow'] = '43';
		$this->background_colors['blue'] = '44';
		$this->background_colors['magenta'] = '45';
		$this->background_colors['cyan'] = '46';
		$this->background_colors['light_gray'] = '47';
		}

		// Returns colored string
	public function getColoredString($string, $foreground_color = null, $background_color = null) {
		$colored_string = "";

			// Check if given foreground color found
		if (isset($this->foreground_colors[$foreground_color])) {
			$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
		}
		// Check if given background color found
		if (isset($this->background_colors[$background_color])) {
			$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
			}

			// Add string and end coloring
		$colored_string .=  $string . "\033[0m";

			return $colored_string;
		}

		// Returns all foreground color names
		public function getForegroundColors() {
			return array_keys($this->foreground_colors);
		}

		// Returns all background color names
	public function getBackgroundColors() {
		return array_keys($this->background_colors);
	}




}


function removeNetworkPersistence()
{
	echo "Remove persistence rules so MAC address reinit doesn't break network...\n\n";
	if (file_exists("/etc/udev/rules.d/70-persistent-net.rules"))
	{
		exec("rm /etc/udev/rules.d/70-persistent-net.rules");
	}

}

function setCascadeDeleteEnabled($enabled)
{
	$enabled = trim(strtolower($enabled));

	if($enabled=='t' || $enabled=='true' || $enabled=='enable' || $enabled=='enabled')
	{
		runSQLFile("/usr/share/tellervo-server/db-options/enable_cascade_delete.sql", "Enabling cascade delete...");
	}
	else if ($enabled=='f' || $enabled=='false' || $enabled=='disable' || $enabled=='disabled')
	{
		runSQLFile("/usr/share/tellervo-server/db-options/disable_cascade_delete.sql", "Disabling cascade delete...");
	}
	else
	{
		echo "\nInvalid option for enabling/disabling cascade delete.  Must be true or false.\n";
		printHelp(true);
  		exit(1);
	}

}

/**
 * Generate a random string, using a cryptographically secure
 * pseudorandom number generator (random_int)
 *
 * For PHP 7, random_int is a PHP core function
 * For PHP 5.x, depends on https://github.com/paragonie/random_compat
 *
 * @param int $length      How many characters do we want?
 * @param string $keyspace A string of all possible characters
 *                         to select from
 * @return string
 */
function random_str($length, $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
{
    $str = '';
    $max = mb_strlen($keyspace, '8bit') - 1;
    for ($i = 0; $i < $length; ++$i) {
        $str .= $keyspace[random_int(0, $max)];
    }
    return $str;
}

?>
