#!/usr/bin/php
<?php
/*
*   This script is intended to be run the very first time the user 
*   logs in to the Virtual Server.  It forces them to reset the
*   sudo password and does various configuration routines which
*   would normally be set during the OS installation.
*/

/**
 * Check this script is being run from the command line
 */
if (!isset($argc))
{
	writeStdErr("This file should be called from the command line only.");
	exit(1);
}

require_once('/usr/share/tellervo-server/tui.php');

// Global variables
$user = "tellervo";
$pwd = "w3l0v3tr33s";
$colors = new Colors();



$dialog = new Tui();

// WELCOME SLIDE
Tui::dialog("--backtitle 'Tellervo Server Configuration' --title 'First run wizard' --msgbox '\n\nWelcome to the Tellervo Server setup wizard.  As this is the first time you have logged in, we need to ask a few questions to configure your new system.\n\nYou can use the arrow and enter keys to make your selections, or just hit enter to chose the default.' 15 80");

// This makes sure we have sudo access without further passwords required
pingSudo();

// Grab the current IP address
exec("hostname -I | awk '{print $1}'", $response);
$ipadd = $response[0];

// Check that the server is not using a localhost for IP
if(stripos($ipadd, "127.0.0", 0) === 0)
{
	Tui::dialog("--backtitle 'Tellervo Server Configuration' --title 'Internal Network Warning!' --msgbox 'The network card on your virtual server is reporting that it's IP address is ".$ipadd." (localhost) rather than an externally accessible address.  This means that your Tellervo server will not be accessible to other computers.\n\nPlease contact the Tellervo developers for support and advice' 20 70");
    die();
}


//
//   STEP 1 - KEYBOARD
//

$dialog = new Tui();
$dialog->processStart("dialog --backtitle 'Tellervo Server Configuration' --title 'Keyboard setup' --yesno 'The default keyboard layout is:\n\n - US English\n\nWould you like to change it?' 15 60");
$dialog->processStop();
$response = $dialog->getReturnCode();

if(!(trim(strtolower($response))==1) || (trim(strtolower($response))==0))
{
	$process = new Tui();
	$process->processStart("sudo -S dpkg-reconfigure keyboard-configuration");
	$process->processStop();

}


//
//   STEP 2 - TIMEZONE
//

$dialog = new Tui();
$dialog->processStart("dialog --backtitle 'Tellervo Server Configuration' --title 'Timezone Configuration' --yesno 'The server timezone is currently set to:\n\n - America/Phoenix\n\nWould you like to change it?' 15 60");
$dialog->processStop();
$response = $dialog->getReturnCode();

if(!(trim(strtolower($response))==1) || (trim(strtolower($response))==0))
{
	$process = new Tui();
	$process->processStart("sudo dpkg-reconfigure tzdata");
	$process->processStop();
   	sleep(2);
}
       
       
//
//   STEP 3 - PASSWORD
//   
$pwd = promptForPwd("Server login password", '\n\nPlease choose a new server command line login password:\n');
resetTellervoLogin($pwd);
   
//
//   STEP 4 - CONTINUE WITH TELLERVO-SERVER CONFIGURATION
//
$process = new Tui();
$process->processStart("sudo tellervo-server --firstrun");
$process->processStop();

// Remove firstrun file so it doesn't run again next time
exec("sudo rm /home/tellervo/firstrun");


die();



function pingSudo()
{	
	exec("echo \"dendrochronology\" | sudo -S touch /tmp/test >> /dev/null");
}


/**
 * END OF SCRIPT BODY
 */

function resetTellervoLogin($pwd)
{

	$myFile = "/tmp/chpwd";
	$fh = fopen($myFile, 'w') or die("can't open temp file");
	chmod($myFile, 0700); 
	
	fwrite($fh, "#!/bin/bash\n");
	fwrite($fh, "echo -e 'dendrochronology\\n$pwd\\n$pwd' | passwd");
    fclose($fh);
	$process = new Tui();
	$process->processStart($myFile);
	$process->processStop();
    
	if(file_exists($myFile))
	{
		unlink($myFile); 
	}
	unlink($myFile);
}


function reconfigureKeyboard()
{
	passthru("sudo dpkg-reconfigure keyboard-configuration");
}

function getTitleString()
{

return "                              WELCOME TO YOUR NEW
    _______  _______  ___      ___      _______  ______   __   __  _______ 
   |       ||       ||   |    |   |    |       ||    _ | |  | |  ||       |
   |_     _||    ___||   |    |   |    |    ___||   | || |  |_|  ||   _   |
     |   |  |   |___ |   |    |   |    |   |___ |   |_|| |       ||  | |  |
     |   |  |    ___||   |___ |   |___ |    ___||    __ ||       ||  |_|  |
     |   |  |   |___ |       ||       ||   |___ |   |  || |     | |       |
     |___|  |_______||_______||_______||_______||___|  ||  |___|  |_______|
 
                                    SERVER
";
}


function printDivider()
{
    global $colors;
	echo $colors->getColoredString("********************************************************************************\n", "light_purple");
}

/**
 * Interactive script for getting a password.  Checks that the password
 * is strong and asks for it twice to check for typos.
 * 
 * @param $isCreating - if true then prompts are tailored to a new password
 *                      otherwise they are for getting existing password
 */
function promptForPwd($title, $prompttext, $isCreating=TRUE)
{

$dialog = new Tui();
$dialog->processStart("dialog --backtitle 'Tellervo Server Configuration' --title '".$title."' --clear --insecure --passwordbox '".$prompttext."' 20 70");
$dialog->processStop();
$retcode = $dialog->getReturnCode();
$pwd1 = $dialog->getPipeTwo();
if($retcode!=0)
{
	clear();
	die();
}

   
   if ((!preg_match("#.*^(?=.{8,20})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$#", $pwd1) || strpos($pwd1, " ")))
   {
     Tui::dialog("--backtitle 'Tellervo Server Configuration' --title '".$title."' --msgbox '\n\nYour password is invalid.  Please try again.\n', 20 70");
     return promptForPwd($title, $prompttext);
   }
	
   if($isCreating===TRUE)
   {
	    $dialog = new Tui();
		$dialog->processStart("dialog --backtitle 'Tellervo Server Configuration' --title '".$title."' --clear --insecure --passwordbox '\n\nEnter again to confirm...\n' 20 70");
		$dialog->processStop();
		$retcode = $dialog->getReturnCode();
		$pwd2 = $dialog->getPipeTwo();
		if($retcode!=0)
		{
			clear();
			die();
		}

	   if($pwd1!=$pwd2)
	   {
     	  Tui::dialog("--backtitle 'Tellervo Server Configuration' --title '$title' --msgbox 'Passwords do not match.  Please try again.', 20 70");
	      return promptForPwd($title, $prompttext);
	   }

	   return $pwd1;
   }

   return $pwd1;
}

function clear()
{
  exec ("clear");

}


/**
 * Script for hidding password from console
 */
function prompt_silent($prompt = "Enter Password:") {
  if (preg_match('/^win/i', PHP_OS)) {
    $vbscript = sys_get_temp_dir() . 'prompt_password.vbs';
    file_put_contents(
      $vbscript, 'wscript.echo(InputBox("'
      . addslashes($prompt)
      . '", "", "password here"))');
    $command = "cscript //nologo " . escapeshellarg($vbscript);
    $password = rtrim(shell_exec($command));
    unlink($vbscript);
    return $password;
  } else {
    $command = "/usr/bin/env bash -c 'echo OK'";
    if (rtrim(shell_exec($command)) !== 'OK') {
      trigger_error("Can't invoke bash");
      return;
    }
    $command = "/usr/bin/env bash -c 'read -s -p \""
      . addslashes($prompt)
      . "\" mypassword && echo \$mypassword'";
    $password = rtrim(shell_exec($command));
    echo "\n";
    return $password;
  }
}


/**
 * Echo a string to the console truncated if longer than $length   
 */
function echoTruncatedString($str, $length=70)
{
  if(strlen($str)>$length-1)
  {
  	$str = substr($str, 0, $length-4 )."... ";
  }
  else
  {
  	$str = str_pad($str, $length);
  }

  echo $str;

}



	/**
	 * Class for printing colors in a terminal
	 */
	class Colors {
		private $foreground_colors = array();
		private $background_colors = array();
 
		public function __construct() {
		// Set up shell colors
		$this->foreground_colors['black'] = '0;30';
		$this->foreground_colors['dark_gray'] = '1;30';
		$this->foreground_colors['blue'] = '0;34';
		$this->foreground_colors['light_blue'] = '1;34';
		$this->foreground_colors['green'] = '0;32';
		$this->foreground_colors['light_green'] = '1;32';
		$this->foreground_colors['cyan'] = '0;36';
		$this->foreground_colors['light_cyan'] = '1;36';
		$this->foreground_colors['red'] = '0;31';
		$this->foreground_colors['light_red'] = '1;31';
		$this->foreground_colors['purple'] = '0;35';
		$this->foreground_colors['light_purple'] = '1;35';
		$this->foreground_colors['brown'] = '0;33';
		$this->foreground_colors['yellow'] = '1;33';
		$this->foreground_colors['light_gray'] = '0;37';
		$this->foreground_colors['white'] = '1;37';
 
		$this->background_colors['black'] = '40';
		$this->background_colors['red'] = '41';
		$this->background_colors['green'] = '42';
		$this->background_colors['yellow'] = '43';
		$this->background_colors['blue'] = '44';
		$this->background_colors['magenta'] = '45';
		$this->background_colors['cyan'] = '46';
		$this->background_colors['light_gray'] = '47';
		}
 
		// Returns colored string
	public function getColoredString($string, $foreground_color = null, $background_color = null) {
		$colored_string = "";
 
			// Check if given foreground color found
		if (isset($this->foreground_colors[$foreground_color])) {
			$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
		}
		// Check if given background color found
		if (isset($this->background_colors[$background_color])) {
			$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
			}
 
			// Add string and end coloring
		$colored_string .=  $string . "\033[0m";
 
			return $colored_string;
		}
 
		// Returns all foreground color names
		public function getForegroundColors() {
			return array_keys($this->foreground_colors);
		}
 
		// Returns all background color names
	public function getBackgroundColors() {
		return array_keys($this->background_colors);
	}
}



?>

