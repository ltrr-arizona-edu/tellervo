<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- Metadata -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.tellervo</groupId>
	<artifactId>tellervo</artifactId>
	<name>Tellervo</name>
	<description>Dendrochronological collection, curation and management software</description>
	<licenses>
		<license>
			<name>The GNU General Public License, Version 3.0</name>
			<url>http://www.gnu.org/licenses/gpl-3.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<organization>
		<name>Laboratory of Tree-Ring Research, University of Arizona</name>
		<url>http://www.tellervo.org</url>
	</organization>
	<developers>
		<developer>
			<name>Peter Brewer</name>
			<email>p.brewer@ltrr.arizona.edu</email>
			<roles>
				<role>Lead Developer</role>
			</roles>
			<organization>Laboratory of Tree-Ring Research, University of Arizona</organization>
			<organizationUrl>https://ltrr.arizona.edu</organizationUrl>
		</developer>
		<developer>
			<name>Martin Munro</name>
			<email>mmunro@ltrr.arizona.edu</email>
			<organization>Laboratory of Tree-Ring Research, University of Arizona</organization>
			<organizationUrl>https://ltrr.arizona.edu</organizationUrl>
		</developer>
		<developer>
			<name>Chris Dunham</name>
			<organization>The Epison Group</organization>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Dan Girshovich</name>
			<organization>The Malcolm and Carolyn Wiener Laboratory for Aegean and Near Eastern
				Dendrochronology</organization>
			<organizationUrl>https://dendro.cornell.edu</organizationUrl>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Aaron Hamid</name>
			<email>aaron@incandescentsoftware.com</email>
			<organization>Incandescent Software LLC</organization>
			<organizationUrl>http://www.incandescentsoftware.com/</organizationUrl>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Ken Harris</name>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Drew Kalina</name>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Rocky Li</name>
			<organization>The Malcolm and Carolyn Wiener Laboratory for Aegean and Near Eastern
				Dendrochronology</organization>
			<organizationUrl>https://dendro.cornell.edu</organizationUrl>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Lucas Madar</name>
			<roles>
				<role>Inactive developer</role>
			</roles>
			<organization>The Epison Group</organization>
		</developer>
		<developer>
			<name>Daniel Murphy</name>
			<email>daniel@dmurph.com</email>
			<organization>The Malcolm and Carolyn Wiener Laboratory for Aegean and Near Eastern
				Dendrochronology</organization>
			<organizationUrl>https://dendro.cornell.edu</organizationUrl>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Robert 'Mecki' Pohl</name>
			<roles>
				<role>Inactive developer</role>
			</roles>
		</developer>
		<developer>
			<name>Kit Sturgeon</name>
			<email>kit@episongroup.com</email>
			<organization>The Epison Group</organization>
			<roles>
				<role>Consultant</role>
			</roles>
		</developer>
		<developer>
			<name>Pavithra Lakshminarayanan</name>
			<organization>University of Arizona</organization>
			<roles>
				<role>Inactive developer</role>
			</roles>			
		</developer>
	</developers>
	<scm>
		<connection>scm:svn:http://svn.code.sf.net/p/tellervo/code-0/trunk</connection>
		<developerConnection>scm:svn:http://svn.code.sf.net/p/tellervo/code-0/trunk</developerConnection>
		<url>http://www.tellervo.org</url>
	</scm>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.build.timestamp.format>HH:mm dd-MMM-yyyy</maven.build.timestamp.format>
		<timestamp>${maven.build.timestamp}</timestamp>
		<serverversion>2.0</serverversion>
		
		<javax.activation.version>1.2.0</javax.activation.version>
        <jaxb.api.version>2.3.0</jaxb.api.version>
        <lombok.version>1.18.6</lombok.version>
	</properties>

	 <!--  Repository to deploy to.  When deploying make sure your .m2/settings.xml
	 file contains the correct username and password for the repository server -->
	<distributionManagement>
	    <repository>
	      <id>ltrr-releases</id>
	      <url>https://repo.ltrr.arizona.edu/ltrr-releases/</url>
	    </repository>
	    <snapshotRepository>
	      <id>ltrr-snapshots</id>
	      <url>https://repo.ltrr.arizona.edu/ltrr-snapshots/</url>
	    </snapshotRepository>
	</distributionManagement>

	<!-- Packages that this project depends upon -->
	<dependencies>

		<!-- JAXB for Java 11 -->
		<dependency>
            <groupId>com.sun.activation</groupId>
            <artifactId>javax.activation</artifactId>
            <version>${javax.activation.version}</version>
        </dependency>
        
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb.api.version}</version>
        </dependency>
 
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-core</artifactId>
            <version>${jaxb.api.version}</version>
        </dependency>
 
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>${jaxb.api.version}</version>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        


		<!-- Locally build WWJ package because the one in Maven central is knackered -->
		<dependency>
			<groupId>gov.nasa.worldwind</groupId>
			<artifactId>worldwindjava-tellervo</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.jogamp.gluegen</groupId>
			<artifactId>gluegen-rt-main</artifactId>
			<version>2.1.5-01</version>
		</dependency>
		<dependency>
			<groupId>org.jogamp.jogl</groupId>
			<artifactId>jogl-all-main</artifactId>
			<version>2.1.5-01</version>
		</dependency>

		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij</artifactId>
			<version>1.51d</version>
		</dependency>
		

		<!-- PDF Creation library -->
		<dependency>
			<groupId>com.itextpdf</groupId>
			<artifactId>itextpdf</artifactId>
			<version>5.5.13.3</version>
		</dependency>
		<!-- Logger -->
		<!-- Diverts System.out calls to logger can be removed once code has been 
			refactored to use proper logger calls -->
		<!-- <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> 
			<version>1.6.1</version> <type>jar</type> <scope>compile</scope> </dependency> -->
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>jpedal</groupId>
			<artifactId>jpedal</artifactId>
			<version>4.45-b-105</version>
		</dependency>
		<dependency>
			<groupId>com.l2fprod.common</groupId>
			<artifactId>l2fprod-common-buttonbar</artifactId>
			<version>6.9.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.l2fprod.common</groupId>
			<artifactId>l2fprod-common-fontchooser</artifactId>
			<version>6.9.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.13</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.5.6</version>
		</dependency>
		<dependency>
			<groupId>com.kenai.nbpwr</groupId>
			<artifactId>com-sun-pdfview</artifactId>
			<version>1.0.5-201003191900</version>
			<type>nbm</type>
			<scope>compile</scope>
		</dependency>
		<!-- hid4java for cross-platform HID USB -->
		<dependency>
			<groupId>org.hid4java</groupId>
			<artifactId>hid4java</artifactId>
			<version>0.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-layout</artifactId>
			<version>1.0.3</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>com.l2prod.common</groupId>
			<artifactId>l2fprod-common-sheet</artifactId>
			<version>6.9.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code</groupId>
			<artifactId>jsyntaxpane</artifactId>
			<version>0.9.5</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<!-- Serial port library -->
		<dependency>
			<groupId>org.rxtx</groupId>
			<artifactId>rxtx</artifactId>
			<version>2.2-20081207</version>
		</dependency>

		<dependency>
			<groupId>org.netbeans.api</groupId>
			<artifactId>org-netbeans-swing-outline</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout</artifactId>
			<version>3.7.4</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.dmurph.mvc</groupId>
			<artifactId>java-simple-mvc</artifactId>
			<version>1.4.4</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>



		<dependency>
			<groupId>de.micromata.jak</groupId>
			<artifactId>JavaAPIforKml</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>jaxb-impl</artifactId>
					<groupId>com.sun.xml.bind</groupId>
				</exclusion>
				<exclusion>
					<artifactId>jaxb-xjc</artifactId>
					<groupId>com.sun.xml.bind</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.tridas</groupId>
			<artifactId>tricycle</artifactId>
			<version>0.3.4</version>
		</dependency>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>pljava-public</artifactId>
			<version>1.4.2</version>
		</dependency>
		<!-- <dependency>
			<groupId>org.swinglabs.swingx</groupId>
			<artifactId>swingx-all</artifactId>
			<version>1.6.5-1</version>
		</dependency>-->
		<dependency>
			<groupId>org.apache.ws.commons.axiom</groupId>
			<artifactId>axiom-jaxen-testsuite</artifactId>
			<version>1.2.12</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung2</artifactId>
			<version>2.0.1</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-samples</artifactId>
			<version>2.0.1</version>
			<exclusions>
				<exclusion>
					<artifactId>stax-api</artifactId>
					<groupId>stax</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.jidesoft</groupId>
			<artifactId>jide-oss</artifactId>
			<version>3.6.1</version>
		</dependency>
		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.13</version>
		</dependency>
	</dependencies>
	<profiles>
		<profile>

			<!-- This profile should be used to create the Windows, Linux and MacOSX 
				binaries. It requries the Install4j (closed-sourced) application as well 
				as access to the appropriate code signing certificate. As such it is not 
				run by default. The following keys must be set in your .m2/settings.xml file: 
				- install4jc.binary - Absolute path to the install4jc binary - pkcs12.filename 
				- Absolute path to the PKCS12 certificate file - cert.password - Password 
				to unlock PKCS12 certificate file -->

			<id>binaries</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<build>
				<plugins>

					<!-- Create a MacOSX native executable n.b. on Linux and Windows this 
						will create an *app.zip file on MacOSX it will also create a DMG file. Also 
						note that on Linux and Windows computers the App will not include the Apple 
						integration portions therefore they will have an ugly menu bar. -->
					<!-- handled by install4j now -->
					<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId> 
						<version>1.0-alpha-2</version> <configuration> <mainClass>org.tellervo.desktop.gui.Startup</mainClass> 
						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <jvmVersion>1.5+</jvmVersion> 
						<bundleName>${project.name}</bundleName> <javaApplicationStub>Native/BuildResources/MacBuild/JavaApplicationStub</javaApplicationStub> 
						</configuration> <executions> <execution> <phase>package</phase> <goals> 
						<goal>bundle</goal> </goals> </execution> </executions> </plugin> <plugin> 
						<groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId> 
						<version>1.0-alpha-2</version> <configuration> <additionalResources> <fileSet> 
						<directory>src/main/resources/Licenses</directory> <includes> <include>license.txt</include> 
						</includes> </fileSet> <fileSet> <directory>Documentation/</directory> <includes> 
						<include>tellervo-manual.pdf</include> </includes> </fileSet> <fileSet> <directory>${project.build.directory}/classes/MacBuild</directory> 
						<includes> <include>Tellervo Drivers.pkg</include> </includes> </fileSet> 
						</additionalResources> <bundleName>Tellervo</bundleName> <zipFile>${project.build.directory}/mac-app.zip</zipFile> 
						<mainClass>org.tellervo.desktop.gui.Startup</mainClass> <jvmVersion>1.5+</jvmVersion> 
						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <javaApplicationStub>${project.build.directory}/classes/MacBuild/JavaApplicationStub</javaApplicationStub> 
						</configuration> <executions> <execution> <phase>package</phase> <goals> 
						<goal>bundle</goal> </goals> </execution> </executions> </plugin> -->


			
			        <plugin>
			          <groupId>org.apache.maven.plugins</groupId>
			          <artifactId>maven-surefire-plugin</artifactId>
			          <version>2.19.1</version>
			        </plugin>

					<!-- Create a Linux Ubuntu debian native installer -->

					<plugin>
						<artifactId>jdeb</artifactId>
						<groupId>org.vafer</groupId>
						<version>1.5</version>
						<executions>


							<!-- Desktop Installer -->
							<!-- <execution> <id>deb-desktop-build</id> <phase>package</phase> 
								<goals> <goal>jdeb</goal> </goals> <configuration> <deb>${project.build.directory}/binaries/desktop/${project.version}/Linux/${project.build.finalName}.deb</deb> 
								<controlDir>${project.build.directory}/classes/LinBuild/DesktopControl/</controlDir> 
								<dataSet> <data> <src>${project.build.directory}/${project.build.finalName}.jar</src> 
								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/tellervo</prefix> 
								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo</src> 
								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/bin/</prefix> <filemode>755</filemode> 
								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo.desktop</src> 
								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/applications/</prefix> 
								<filemode>755</filemode> </mapper> </data> <data> <src>src/main/resources/Icons/256x256/tellervo-application.png</src> 
								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/pixmaps/</prefix> 
								</mapper> </data> </dataSet> </configuration> </execution> -->

							<!-- Server installer -->
							<execution>
								<id>deb-server-build</id>
								<phase>package</phase>
								<goals>
									<goal>jdeb</goal>
								</goals>
								<configuration>
									<deb>${project.build.directory}/binaries/server/${serverversion}/Linux/tellervo-server-${serverversion}.deb</deb>
									<controlDir>${project.build.directory}/classes/</controlDir>
									<dataSet>
										<data>
											<src>Native/BuildResources/LinBuild/tellervo-server</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/bin</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/create-tellervo-instance</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/bin</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<type>template</type>
											<paths>
												<path>/usr/share/tellervo-server/mediastore</path>
												<user>www-data</user>
												<group>www-data</group>
											</paths>
										</data>
										<data>
											<src>${project.build.directory}/tellervo-pljava.jar</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/tellervo-apache.conf</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/etc/apache2/sites-available/</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/pljava-pg14-amd64-Linux-gpp.jar</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>										
										<data>
											<src>Native/BuildResources/LinBuild/pljava-pg9.5-i386-Linux-gpp.jar</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/pljava-pg9.5-amd64-Linux-gpp.jar</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<src>Databases/db-upgrade-patches</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/db-upgrade-patches</prefix>
											</mapper>
										</data>
										<data>
											<src>Databases/db-templates</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server</prefix>
											</mapper>
										</data>
										<data>
											<src>Databases/db-options</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server/db-options</prefix>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/tui.php</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server</prefix>
												<filemode>777</filemode>
											</mapper>
										</data>
										<data>
											<src>Native/BuildResources/LinBuild/firstrun.template</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server</prefix>
												<filemode>777</filemode>
											</mapper>
										</data>
										<data>
											<src>src/main/php/config.php.template</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/share/tellervo-server</prefix>
											</mapper>
										</data>
										<data>
											<src>src/main/php</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/var/www/tellervo</prefix>
											</mapper>
										</data>
									</dataSet>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
						running Ant instead -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.3</version>
						<executions>

							<execution>
								<id>Install4J</id>
								<phase>package</phase>
								<configuration>
									<tasks>
										<taskdef resource="net/sf/antcontrib/antcontrib.properties"
											classpathref="maven.plugin.classpath" />
										<!-- <exec dir="${project.build.directory}" executable="/home/pbrewer/bin/install4j6/bin/install4jc"> -->
										<exec dir="${project.build.directory}" executable="${install4jc.binary}">

											<arg value="--win-keystore-password" />
											<arg value="${cert.password}" />
											<arg value="--mac-keystore-password" />
											<arg value="${cert.password}" />
											<arg value="${project.build.directory}/classes/tellervo.install4j" />
										</exec>
									</tasks>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>

						</executions>

					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docs</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>

			</build>

		</profile>

		<profile>
			<id>default-build</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>!binaries</name>
				</property>
			</activation>

			<build>
				<plugins>


					<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
						running Ant instead -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.3</version>
						<executions>

							<execution>
								<id>CopyJarFile</id>
								<phase>package</phase>
								<configuration>
									<tasks>
										<taskdef resource="net/sf/antcontrib/antcontrib.properties"
											classpathref="maven.plugin.classpath" />
										<mkdir
											dir="${project.build.directory}/binaries/desktop/${project.version}/Java" />
										<trycatch>
											<try>
												<!-- Try to sign the jar with the University of Arizona certificate -->
												<exec dir="${project.build.directory}" executable="jarsigner">
													<arg value="-storetype" />
													<arg value="pkcs12" />
													<arg value="-tsa" />
													<arg value="http://tsa.starfieldtech.com" />
													<arg value="-keystore" />
													<!-- <arg value="/home/pbrewer/.ssh/pwb_code_signing_2014.p12" 
														/> -->
													<arg value="${pkcs12.filename}" />
													<arg value="-storepass" />
													<!-- <arg value="/home/pbrewer/.ssh/key" /> -->
													<arg value="${cert.password}" />
													<arg value="-keypass" />
													<!-- <arg value="/home/pbrewer/.ssh/key" /> -->
													<arg value="${cert.password}" />
													<arg
														value="${project.build.directory}/${project.build.finalName}.jar" />
													<arg value="the university of arizona's internet2 id" />
												</exec>
											</try>
											<catch>
												<echo>*******************************************************</echo>
												<echo> UNABLE TO SIGN executable jar. Certificate/pwd
													invalid</echo>
												<echo>*******************************************************</echo>
												<sleep seconds="5" />
											</catch>
										</trycatch>

										<copy
											file="${project.build.directory}/${project.build.finalName}.jar"
											tofile="${project.build.directory}/binaries/desktop/${project.version}/Java/${project.build.finalName}.jar"
											failonerror="false" />
									</tasks>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>

						</executions>

					</plugin>



				</plugins>
			</build>

		</profile>

	</profiles>
	<build>

		<!-- Create launch scripts for Linux builds with correct version number -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/*.xml</exclude>
					<exclude>**/*.wav</exclude>
					<exclude>**/*.ttf</exclude>
					<exclude>**/*.dll</exclude>
					<exclude>**/*.so</exclude>
					<exclude>**/*.jar</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>Native/BuildResources/</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.install4j</include>
				</includes>
			</resource>
			<resource>
				<directory>Native/BuildResources/MacBuild</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/JavaApplicationStub</include>
					<include>**/fixportpermissions.sh</include>
				</includes>
			</resource>
			<resource>
				<directory>Native/BuildResources/LinBuild</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/tellervo.desktop</include>
				</includes>
				<excludes>
					<exclude>**/tellervo-server</exclude>
					<exclude>**/create-tellervo-instance</exclude>		
					<exclude>**/tellervo-apache.conf</exclude>
					<exclude>**/pljava-pg-9.5-amd64-Linux-gpp.jar</exclude>
					<exclude>**/pljava-pg-9.5-i386-Linux-gpp.jar</exclude>		
							
				</excludes>
			</resource>
			<resource>
				<directory>Native/BuildResources/LinBuild</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/tellervo-server</include>
					<include>**/create-tellervo-instance</include>
					<include>**/tellervo-apache.conf</include>
					<include>**/pljava-pg-9.5-amd64-Linux-gpp.jar</include>
					<include>**/pljava-pg-9.5-i386-Linux-gpp.jar</include>
				</includes>
				<excludes>
					<exclude>**/tellervo.desktop</exclude>
				</excludes>
			</resource>
			
			<resource>
				<directory>Native/BuildResources/LinBuild/ServerControl</directory>
				<filtering>true</filtering>
			</resource>
			
			<resource>
				<directory>Native/BuildResources/Docker</directory>
				<filtering>false</filtering>
			</resource>
			
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/log4j.xml</include>
					<include>**/WWJCacheConfig.xml</include>
					<include>**/*.wav</include>
					<include>**/*.ttf</include>
					<include>**/*.dll</include>
					<include>**/*.so</include>
					<include>**/*.jar</include>
				</includes>
			</resource>

		</resources>




		<plugins>

			<!-- Check the code is up-to-date and grab SVN version number -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
				</configuration>
			</plugin>


			<!-- JAXB -->
			<plugin>
				<groupId>org.jvnet.jaxb2.maven2</groupId>
				<artifactId>maven-jaxb2-plugin</artifactId>
				<version>0.7.3</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>

					<args>
						<arg>-extension</arg>
						<arg>-no-header</arg>
						<arg>-XtoString</arg>
						<arg>-Xequals</arg>
						<arg>-XhashCode</arg>
						<arg>-Xcopyable</arg>
						<arg>-Xifins</arg>
						<arg>-Xtridas-annotations</arg>
						<arg>-Xcollection-setter-injector</arg>
						<arg>-Xannotate</arg>
					</args>

					<schemaDirectory>src/main/resources/schemas</schemaDirectory>
					<!-- Ignore these as they are in TridasJLib -->
					<schemaExcludes>
						<exclude>gmlsf.xsd</exclude>
						<exclude>tridas.xsd</exclude>
					</schemaExcludes>
					
					<bindingDirectory>src/main/resources/binding</bindingDirectory>
					<generateDirectory>src/main/generated</generateDirectory>
					<verbose>true</verbose>



					<plugins>
						<plugin>
							<groupId>org.jvnet.jaxb2_commons</groupId>
							<artifactId>jaxb2-basics</artifactId>
							<version>0.6.1</version>
						</plugin>
					</plugins>

				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.jvnet.jaxb2_commons</groupId>
						<artifactId>jaxb2-basics-runtime</artifactId>
						<version>0.6.1</version>
					</dependency>
					<dependency>
						<groupId>org.jvnet.jaxb2_commons</groupId>
						<artifactId>xjc-if-ins</artifactId>
						<version>0.5.2</version>
					</dependency>
					<dependency>
						<groupId>org.jvnet.jaxb2_commons</groupId>
						<artifactId>jaxb2-basics-annotate</artifactId>
						<version>0.6.1</version>
					</dependency>
					<dependency>
						<groupId>org.tridas.schema</groupId>
						<artifactId>tridasaandi</artifactId>
						<version>1.0</version>
					</dependency>
					<dependency>
						<groupId>org.tridas.schema</groupId>
						<artifactId>tridas-annotations</artifactId>
						<version>1.0</version>
					</dependency>
					<dependency>
						<groupId>com.sun.tools.xjc</groupId>
						<artifactId>collection-setter-injector</artifactId>
						<version>0.1</version>
					</dependency>
					<dependency>
						<groupId>org.tridas</groupId>
						<artifactId>tridasjlib</artifactId>
						<version>1.22.6</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Include resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
			</plugin>

			<!-- Reconfigure "clean" in Maven not to delete target directory -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.4.1</version>
				<configuration>
					<excludeDefaultDirectories>true</excludeDefaultDirectories>
					<filesets>
						<fileset>
							<directory>target</directory>
							<includes>
								<include>**/*</include>
							</includes>
							<excludes>
								<exclude>**/.svn</exclude>
							</excludes>
						</fileset>
						<fileset>
							<directory>src/main/generated</directory>
							<includes>
								<include>**/*.java</include>
							</includes>
							<excludes>
								<exclude>**/.svn</exclude>
							</excludes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<!-- <addDefaultImplementationEntries>true</addDefaultImplementationEntries> -->
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>org.tellervo.desktop.gui.Startup</mainClass>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${buildNumber}</Implementation-Build>
							<Implementation-Build-Timestamp>${maven.build.timestamp}</Implementation-Build-Timestamp>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>

						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1.2</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Compile application -->
			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<excludes>
						<exclude>**/edu/cornell/dendro/cpgdb/*</exclude>
						<exclude>**/edu/cornell/dendro/webservice/*</exclude>
					</excludes>
					<!-- <include>/native/Libraries</include> -->
					<optimise>true</optimise>
					<debug>true</debug>
				</configuration>
			</plugin>


			<!-- Use shade to create a single jar containing all the dependencies -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId> 
				<version>1.3.3</version> <executions> <execution> <id>clientjar</id> <phase>package</phase> 
				<goals> <goal>shade</goal> </goals> <configuration> <transformers> <transformer 
				implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> 
				<mainClass>org.tellervo.desktop.gui.Startup</mainClass> </transformer> </transformers> 
				<filters> <filter> <artifact>*:*</artifact> <excludes> <exclude>META-INF/*.SF</exclude> 
				<exclude>META-INF/*.DSA</exclude> <exclude>META-INF/*.RSA</exclude> </excludes> 
				</filter> </filters> </configuration> </execution> </executions> </plugin> -->


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.5.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- configure the plugin here -->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
				running Ant instead -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.3</version>
				<executions>


					<!-- Delete the duplicate TRiDaS and GML classes produced by JAXB when 
						creating the Tellervo classes. -->
					<execution>
						<id>DeleteDuplicateJAXBClasses</id>
						<phase>generate-sources</phase>
						<configuration>
							<task>
								<echo>Removing extra JAXB generated classes...</echo>
							</task>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<delete dir="src/main/generated/net" />
								<delete dir="src/main/generated/org/tridas" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>




					<!-- Strip duplicate deps from MacOSX bundle, and add native libraries 
						manual and license files. Finally zip up and move into binaries folder -->
					<!-- <execution> <id>AddLibsToMacOSXApp</id> <phase>package</phase> 
						<configuration> <tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties" 
						classpathref="maven.plugin.classpath"/> <trycatch> <try> <echo> MKDIR ${project.build.directory}/binaries/desktop/${project.version}/MacOSX 
						</echo> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/MacOSX"/> 
						<echo> Delete dependencies from JAR: ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo</echo> 
						<delete dir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo"/> 
						<echo>Copy JAR into the build folder</echo> <echo>File: ${project.build.directory}/${project.build.finalName}.jar... 
						into ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/</echo> 
						<copy file="${project.build.directory}/${project.build.finalName}.jar" todir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/"/> 
						<echo>Delete any previous OSX package</echo> <delete file="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
						failonerror="false"/> <echo>Create the app.zip file from our build folder. 
						555 filemode required for executing</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
						update="false"> <zipfileset filemode="555" dir="${project.build.directory}/${project.build.finalName}" 
						includes="Tellervo.app/**"/> </zip> <echo>Add license, manual and native 
						package into the root of the zip</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
						update="true"> <fileset dir="Native/BuildResources/MacBuild/NativePackages/" 
						includes="**/*.pkg"/> <fileset dir="${project.build.directory}/classes/Licenses/" 
						includes="**/license.txt"/> <fileset dir="Documentation" includes="**/tellervo-manual.pdf"/> 
						</zip> </try> <catch> <echo>*********************************</echo> <echo> 
						UNABLE TO COMPLETE THIS TASK </echo> <echo> Error building MacOSX pacakage 
						</echo> <echo>*********************************</echo> <sleep seconds="5"/> 
						</catch> </trycatch> </tasks> </configuration> <goals> <goal>run</goal> </goals> 
						</execution> -->


					<!-- Run Makensis to create the windows installers -->
					<!-- <execution> <id>RunNSIS</id> <phase>package</phase> <configuration> 
						<tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath"/> 
						<trycatch> <try> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/Windows"/> 
						<exec dir="${project.build.directory}/classes/WinBuild" executable="makensis"> 
						<arg value="main.nsh"/> </exec> <copy file="${project.build.directory}/${project.build.finalName}-unsigned.exe" 
						tofile="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe" 
						failonerror="false"/> </try> <catch> <echo>**********************************************</echo> 
						<echo> UNABLE TO COMPLETE THIS TASK </echo> <echo> makensis is not available 
						on this computer </echo> <echo> Windows installer package will not be created</echo> 
						<echo>**********************************************</echo> <sleep seconds="5"/> 
						</catch> </trycatch> <trycatch> <try> <exec dir="${project.build.directory}" 
						executable="osslsigncode"> <arg value="sign"/> <arg value="-certs"/> <arg 
						value="/home/pbrewer/.ssh/cert.pem"/> <arg value="-key"/> <arg value="/home/pbrewer/.ssh/key.pem"/> 
						<arg value="-n"/> <arg value="Tellervo"/> <arg value="-t"/> <arg value="http://tsa.starfieldtech.com/"/> 
						<arg value="-i"/> <arg value="http://www.tellervo.org"/> <arg value="-in"/> 
						<arg value="${project.build.directory}/${project.build.finalName}-unsigned.exe"/> 
						<arg value="-out"/> <arg value="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe"/> 
						</exec> </try> <catch> <echo>**********************************************</echo> 
						<echo> UNABLE TO SIGN Windows executable </echo> <echo>**********************************************</echo> 
						<sleep seconds="5"/> </catch> </trycatch> </tasks> </configuration> <goals> 
						<goal>run</goal> </goals> </execution> -->




					<execution>
						<id>BuildPLJavaJar</id>
						<phase>compile</phase>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />

								<jar jarfile="${project.build.directory}/tellervo-pljava.jar"
									basedir="${project.build.directory}/classes" includes="org/tellervo/cpgdb/** org/tellervo/indexing/**" />

							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>

				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>1.0b3</version>
						<exclusions>
							<exclusion>
								<groupId>ant</groupId>
								<artifactId>ant</artifactId>
							</exclusion>
						</exclusions>
					</dependency>
					<dependency>
						<groupId>ant</groupId>
						<artifactId>ant-nodeps</artifactId>
						<version>1.6.5</version>
					</dependency>
					<dependency>
						<groupId>ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.6.5</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.54</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>



		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.jvnet.jaxb2.maven2
										</groupId>
										<artifactId>
											maven-jaxb2-plugin
										</artifactId>
										<versionRange>
											[0.7.3,)
										</versionRange>
										<goals>
											<goal>generate</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.3]
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	

	<repositories>
		<repository>
			<id>ltrr-releases</id>
			<name>LTRR Maven Releases Repository</name>
			<url>https://repo.ltrr.arizona.edu/ltrr-releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>ltrr-snapshots</id>
			<name>LTRR Maven Snapshots Repository</name>
			<url>https://repo.ltrr.arizona.edu/ltrr-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>



	<pluginRepositories>
		<pluginRepository>
			<id>ltrr-releases</id>
			<name>LTRR Maven Releases Repository</name>
			<url>https://repo.ltrr.arizona.edu/ltrr-releases/</url>
		</pluginRepository>
		<pluginRepository>
			<id>ltrr-snapshots</id>
			<name>LTRR Maven Snapshots Repository</name>
			<url>https://repo.ltrr.arizona.edu/ltrr-snapshots/</url>
		</pluginRepository>
	</pluginRepositories>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>de.micromata.jak</groupId>
				<artifactId>JavaAPIforKml</artifactId>
				<version>2.2.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<issueManagement>
		<url>https://sourceforge.net/p/tellervo/tickets/</url>
		<system>Sourceforge.net</system>
	</issueManagement>
	<version>1.5.0</version>
</project>
